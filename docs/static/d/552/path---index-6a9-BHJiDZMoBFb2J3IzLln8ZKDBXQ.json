{"data":{"site":{"siteMetadata":{"version":"0.15.0","jsdocs":[{"path":"array/toObj","sig":"[ k: v ] -> { k: v }","examples":["toObj(['a', 'b', 'c']); // { 0: a, 1: b, 2: c }"],"kind":"function","description":"Transform an array into an object, where keys are indices, and values are elements.","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/array/index.js#L18","ignore":false},{"path":"array/toObjBy","sig":"(a -> b) -> [a] -> { b: a }","examples":[],"kind":"function","description":"Given a function that generates a key, turns a list of objects into an object indexing the objects by the given key","deprecated":true,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/array/index.js#L26","ignore":true},{"path":"array/sample","sig":"[a] -> a","examples":["sample([0, 1, 2, 3, 4, 5]); // 2"],"kind":"function","description":"Select a random array item","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/array/index.js#L37","ignore":false},{"path":"array/shuffle","sig":"[a] -> [a]","examples":["shuffle([1, 2, 3, 4, 5]); // [4, 1, 2, 5, 3]"],"kind":"function","description":"Immutably randomize array element order\nFisher-Yates shuffle","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/array/index.js#L47","ignore":false},{"path":"async/all","sig":"[Promise<a>] -> [a]","examples":[],"kind":"function","description":"Resolve promises in parallel","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L18","ignore":false},{"path":"async/race","sig":"[Promise<a>] -> a","examples":[],"kind":"function","description":"Race","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L25","ignore":false},{"path":"async/delay","sig":"Number -> Promise<undefined>","examples":["await delay(100); // resolved in 100ms"],"kind":"function","description":"Promise returning setTimeout","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L33","ignore":false},{"path":"async/defer","sig":"(a -> b) -> Promise<b>","examples":["await defer(_ => 3); // 3"],"kind":"function","description":"Defers invoking a function until the current call stack has cleared","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L41","ignore":false},{"path":"async/toAsync","sig":"(a -> b) -> (a -> Promise<b>)","examples":[],"kind":"function","description":"wraps a function to always return a promise","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L48","ignore":false},{"path":"async/fromCallback","sig":null,"examples":["await fromCallback(cb => cb(null, 123)); // 123\nawait fromCallback(cb => cb(Error('oops'))); // Error('oops')"],"kind":"function","description":"Returns a promise that is resolved by an err-back function","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L56","ignore":false},{"path":"async/promisify","sig":null,"examples":["const callback = (n, cb) => cb(null, n + 1);\nawait promisify(callback)(1); // 2"],"kind":"function","description":"Make an errback-calling function promise-returning. Inverse of callbackify","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L73","ignore":false},{"path":"async/deferred","sig":"* -> Object","examples":[],"kind":"function","description":"creates an externally controlled promise","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L91","ignore":false},{"path":"async/reduce","sig":"((a, b) -> Promise<a>) -> a -> [b] -> Promise<a>","examples":[],"kind":"function","description":"Async reduce","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L108","ignore":false},{"path":"async/pipe","sig":"(...f) -> f","examples":[],"kind":"function","description":"serial + async R.pipe. works with sync or async functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L118","ignore":false},{"path":"async/pipeC","sig":"(...f) -> f","examples":[],"kind":"function","description":"Curried async pipe","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L127","ignore":false},{"path":"async/mapLimit","sig":"Number -> (a -> Promise<b>) -> [a] -> Promise<[b]>","examples":["// [2, 4, 6, 8, 10]\nawait mapLimit(2, async n => n * 2, [1, 2, 3, 4, 5]);"],"kind":"function","description":"Map with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L137","ignore":false},{"path":"async/mapPairsLimit","sig":"Number -> ([a, b] -> Promise<[c, d]>) -> { a: b } -> Promise<{ c: d }>","examples":[],"kind":"function","description":"Map pairs with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L164","ignore":false},{"path":"async/forEachLimit","sig":"Number -> (a -> Promise<b>) -> [a] -> Promise<[a]>","examples":[],"kind":"function","description":"For each with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L173","ignore":false},{"path":"async/everyLimit","sig":"Number -> (a -> Promise<Boolean>) -> [a] -> Promise<Boolean>","examples":[],"kind":"function","description":"Every with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L183","ignore":false},{"path":"async/someLimit","sig":"Number -> (a -> Promise<Boolean>) -> [a] -> Promise<Boolean>","examples":[],"kind":"function","description":"Some with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L197","ignore":false},{"path":"async/findLimit","sig":"Number -> (a -> Promise<Boolean>) -> [a] -> Promise<a>","examples":[],"kind":"function","description":"Find with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L211","ignore":false},{"path":"async/flatMapLimit","sig":"Number -> (a -> Promise<[b]>) -> [a] -> Promise<[b]>","examples":["const array = [1, 2, 3];\n\n// [1, 2, 2, 4, 3, 6]\nawait flatMapLimit(2, async n => [n, n * 2], array);"],"kind":"function","description":"Flat map (aka. \"chain\") with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L232","ignore":false},{"path":"async/filterLimit","sig":"Number -> (a -> Promise<Boolean>) -> [a] -> Promise<[a]>","examples":[],"kind":"function","description":"Filter with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L239","ignore":false},{"path":"async/allSettledLimit","sig":"Number -> [Promise] -> Promise<[{ status, value, reason }]>","examples":[],"kind":"function","description":"All settled with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L248","ignore":false},{"path":"async/map","sig":"(a -> Promise<b>) -> [a] -> Promise<[b]>","examples":[],"kind":"function","description":"Parallel map","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L262","ignore":false},{"path":"async/mapSeries","sig":"(a -> Promise<b>) -> [a] -> Promise<[b]>","examples":[],"kind":"function","description":"Serial map","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L269","ignore":false},{"path":"async/mapPairs","sig":"([a, b] -> Promise<[c, d]>) -> { a: b } -> Promise<{ c: d }>","examples":[],"kind":"function","description":"Parallel map pairs","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L276","ignore":false},{"path":"async/mapPairsSeries","sig":"([a, b] -> Promise<[c, d]>) -> { a: b } -> Promise<{ c: d }>","examples":[],"kind":"function","description":"Serial map pairs","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L283","ignore":false},{"path":"async/forEach","sig":"(a -> Promise<b>) -> [a] -> Promise<[a]>","examples":[],"kind":"function","description":"Parallel for each","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L290","ignore":false},{"path":"async/forEachSeries","sig":"(a -> Promise<b>) -> [a] -> Promise<[a]>","examples":[],"kind":"function","description":"Serial for each","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L297","ignore":false},{"path":"async/every","sig":"(a -> Promise<Boolean>) -> [a] -> Promise<Boolean>","examples":[],"kind":"function","description":"Parallel every","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L304","ignore":false},{"path":"async/everySeries","sig":"(a -> Promise<Boolean>) -> [a] -> Promise<Boolean>","examples":[],"kind":"function","description":"Serial every","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L311","ignore":false},{"path":"async/some","sig":"(a -> Promise<Boolean>) -> [a] -> Promise<Boolean>","examples":[],"kind":"function","description":"Parallel some","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L318","ignore":false},{"path":"async/someSeries","sig":"(a -> Promise<Boolean>) -> [a] -> Promise<Boolean>","examples":[],"kind":"function","description":"Serial some","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L325","ignore":false},{"path":"async/find","sig":"(a -> Promise<Boolean>) -> [a] -> Promise<a>","examples":[],"kind":"function","description":"Parallel find","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L332","ignore":false},{"path":"async/findSeries","sig":"(a -> Promise<Boolean>) -> [a] -> Promise<a>","examples":[],"kind":"function","description":"Serial find","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L339","ignore":false},{"path":"async/flatMap","sig":"(a -> Promise<[b]>) -> [a] -> Promise<[b]>","examples":["const array = [1, 2, 3];\n\n// [1, 2, 2, 4, 3, 6]\nawait flatMap(async n => [n, n * 2], array);"],"kind":"function","description":"Parallel flatMap (aka. \"chain\")","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L351","ignore":false},{"path":"async/flatMapSeries","sig":"(a -> Promise<[b]>) -> [a] -> Promise<[b]>","examples":["const array = [1, 2, 3];\n\n// [1, 2, 2, 4, 3, 6]\nawait flatMapSeries(async n => [n, n * 2], array);"],"kind":"function","description":"Serial flatMap (aka. \"chain\")","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L363","ignore":false},{"path":"async/filter","sig":"(a -> Promise<Boolean>) -> [a] -> Promise<[a]>","examples":["const array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n// [0, 1, 2, 3, 4, 5]\nawait filter(async n => (n <= 5), array);"],"kind":"function","description":"Parallel filter","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L374","ignore":false},{"path":"async/filterSeries","sig":"(a -> Promise<Boolean>) -> [a] -> Promise<[a]>","examples":["const array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n// [0, 1, 2, 3, 4, 5]\nawait filterSeries(async n => (n <= 5), array);"],"kind":"function","description":"Serial filter","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L385","ignore":false},{"path":"async/allSettled","sig":"[Promise] -> Promise<[{ status, value, reason }]>","examples":[],"kind":"function","description":"Parallel all settled","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L392","ignore":false},{"path":"async/allSettledSeries","sig":"[Promise] -> Promise<[{ status, value, reason }]>","examples":[],"kind":"function","description":"Serial all settled","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L399","ignore":false},{"path":"async/props","sig":"{ k: Promise<v> } -> Promise<{ k: v }>","examples":["// { one: 1, two: 2 }\nawait props({\n one: Promise.resolve(1),\n two: Promise.resolve(2),\n})"],"kind":"function","description":"Parallel props","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L412","ignore":false},{"path":"async/evolve","sig":"{ k: (a -> Promise<b>) } -> { k: a } -> Promise<{ k: b }>","examples":[],"kind":"function","description":"Async R.evolve","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L419","ignore":false},{"path":"async/timeout","sig":"Number -> Promise<a> -> Promise<a>","examples":[],"kind":"function","description":"Timeout a promise","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L426","ignore":false},{"path":"color/rgbToHsl","sig":"{ r, g, b } -> { h, s, l }","examples":[],"kind":"function","description":"RGB to HSL","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L14","ignore":false},{"path":"color/hslToRgb","sig":"{ h, s, l } -> { r, g, b }","examples":[],"kind":"function","description":"HSL to RGB","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L49","ignore":false},{"path":"color/hexToRgb","sig":"String -> { r, g, b }","examples":[],"kind":"function","description":"Hex to RGB","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L84","ignore":false},{"path":"color/rgbToHex","sig":"{ r, g, b } -> String","examples":[],"kind":"function","description":"RGB to hex","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L105","ignore":false},{"path":"color/hslToHex","sig":"{ h, s, l } -> String","examples":[],"kind":"function","description":"HSL to hex","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L117","ignore":false},{"path":"color/hexToHsl","sig":"String -> { h, s, l }","examples":[],"kind":"function","description":"Hex to HSL","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L123","ignore":false},{"path":"color/randomRgb","sig":"* -> { r, g, b }","examples":["randomRgb(); // { r: 35, g: 125, b: 106 }"],"kind":"function","description":"Get a random RGB value","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L130","ignore":false},{"path":"color/randomHex","sig":"* -> String","examples":["randomHex(); // #b3a95a"],"kind":"function","description":"Get a random hex string","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L141","ignore":false},{"path":"color/randomHsl","sig":"* -> { h, s, l }","examples":[],"kind":"function","description":"Get a random HSL value","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L147","ignore":false},{"path":"crypto/hashWith","sig":"String -> String -> String","examples":["hashWith('md5', 'hello'); // '5d41402abc4b2a76b9719d911017c592'"],"kind":"function","description":"Hash with variable algorithm","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/crypto/index.js#L13","ignore":false},{"path":"crypto/md5","sig":"String -> String","examples":["md5('hello'); // '5d41402abc4b2a76b9719d911017c592'"],"kind":"function","description":"md5 hash a string","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/crypto/index.js#L23","ignore":false},{"path":"crypto/sha256","sig":"String -> String","examples":["sha256('hello'); // '2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824'"],"kind":"function","description":"sha256 hash a string","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/crypto/index.js#L30","ignore":false},{"path":"crypto/sha512","sig":"String -> String","examples":[],"kind":"function","description":"sha512 hash a string","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/crypto/index.js#L36","ignore":false},{"path":"datetime/now","sig":"a -> Date","examples":[],"kind":"function","description":"Get the current unix epoch (in ms)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/datetime/index.js#L5","ignore":false},{"path":"function/pipeC","sig":"...f -> f","examples":[],"kind":"function","description":"Curried pipe","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/function/index.js#L8","ignore":false},{"path":"function/on","sig":"(b -> b -> c) -> (a -> b) -> a -> a -> c","examples":["const records = [{ age: 9 }, { age: 1 }, { age: 3 }];\n\n// [{ age: 1 }, { age: 3 }, { age: 9 }]\nR.sort(on(R.subtract, R.prop('age'))), records);"],"kind":"function","description":"on","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/function/index.js#L19","ignore":false},{"path":"function/once","sig":"(a -> b) -> (a -> b)","examples":[],"kind":"function","description":"once","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/function/index.js#L25","ignore":false},{"path":"function/noop","sig":"a -> undefined","examples":[],"kind":"function","description":"\"no-op\"","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/function/index.js#L41","ignore":false},{"path":"function/throttle","sig":"Number -> (a -> b) -> (a -> b)","examples":[],"kind":"function","description":"Throttle a function","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/function/index.js#L47","ignore":false},{"path":"function/debounce","sig":"Number -> (a -> b) -> (a -> undefined)","examples":[],"kind":"function","description":"Debounce a function","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/function/index.js#L61","ignore":false},{"path":"http/parseContentType","sig":"String -> { mimeType, charset, boundary }","examples":[],"kind":"constant","description":"Parse a content-type HTTP header into its parts","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/http/index.js#L12","ignore":false},{"path":"array","sig":null,"examples":[],"kind":"module","description":"Array functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L1","ignore":false},{"path":"async","sig":null,"examples":[],"kind":"module","description":"Async functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L6","ignore":false},{"path":"color","sig":null,"examples":[],"kind":"module","description":"Color functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L11","ignore":false},{"path":"crypto","sig":null,"examples":[],"kind":"module","description":"Crypto functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L16","ignore":false},{"path":"datetime","sig":null,"examples":[],"kind":"module","description":"Datetime functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L21","ignore":false},{"path":"function","sig":null,"examples":[],"kind":"module","description":"Function functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L26","ignore":false},{"path":"http","sig":null,"examples":[],"kind":"module","description":"HTTP functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L31","ignore":false},{"path":"is","sig":null,"examples":[],"kind":"module","description":"Is functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L36","ignore":false},{"path":"iterable","sig":null,"examples":[],"kind":"module","description":"Iterable functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L41","ignore":false},{"path":"number","sig":null,"examples":[],"kind":"module","description":"Number functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L46","ignore":false},{"path":"object","sig":null,"examples":[],"kind":"module","description":"Object functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L51","ignore":false},{"path":"process","sig":null,"examples":[],"kind":"module","description":"Process functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L56","ignore":false},{"path":"stream","sig":null,"examples":[],"kind":"module","description":"Stream functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L61","ignore":false},{"path":"string","sig":null,"examples":[],"kind":"module","description":"String functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L66","ignore":false},{"path":"url","sig":null,"examples":[],"kind":"module","description":"Url functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L71","ignore":false},{"path":"uuid","sig":null,"examples":[],"kind":"module","description":"UUID functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L76","ignore":false},{"path":"is/isFinite","sig":"a -> Boolean","examples":["isFinite(10); // true\nisFinite(Infinity); // false"],"kind":"function","description":"Is finite?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L18","ignore":false},{"path":"is/isInteger","sig":"a -> Boolean","examples":["isInteger(1); // true\nisInteger(1.23); // false"],"kind":"function","description":"Is integer?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L27","ignore":false},{"path":"is/isNaN","sig":"a -> Boolean","examples":["isNaN(NaN); // true"],"kind":"function","description":"Is NaN?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L34","ignore":false},{"path":"is/isArray","sig":"a -> Boolean","examples":["isArray([]); // true"],"kind":"function","description":"Is Array?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L43","ignore":false},{"path":"is/isBuffer","sig":"a -> Boolean","examples":[],"kind":"function","description":"Is Buffer?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L51","ignore":false},{"path":"is/is","sig":"a -> b -> Boolean","examples":[],"kind":"function","description":"Is equal (strict reference equality)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L58","ignore":false},{"path":"is/isNot","sig":"a -> b -> Boolean","examples":[],"kind":"function","description":"Is not equal (strict reference equality)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L64","ignore":false},{"path":"is/isInstanceOf","sig":"String -> a -> Boolean","examples":["isInstanceOf(Array, []); // true"],"kind":"function","description":"Is instance of class?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L71","ignore":false},{"path":"is/isTypeOf","sig":"String -> a -> Boolean","examples":["isTypeOf('boolean', true); // true"],"kind":"function","description":"Is type of?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L78","ignore":false},{"path":"is/isBoolean","sig":"a -> Boolean","examples":["isBoolean(false); // true"],"kind":"function","description":"Is Boolean?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L85","ignore":false},{"path":"is/isDate","sig":"a -> Boolean","examples":["isDate(new Date()); // true"],"kind":"function","description":"Is Date?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L92","ignore":false},{"path":"is/isRegExp","sig":"a -> Boolean","examples":["isRegExp(/[a-z]/); // true"],"kind":"function","description":"Is regular expression?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L99","ignore":false},{"path":"is/isFunction","sig":"a -> Boolean","examples":["isFunction(() => {}); // true"],"kind":"function","description":"Is function?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L106","ignore":false},{"path":"is/isNull","sig":"a -> Boolean","examples":["isNull(null); // true"],"kind":"function","description":"Is null?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L113","ignore":false},{"path":"is/isString","sig":"a -> Boolean","examples":["isString('hello'); // true"],"kind":"function","description":"Is string?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L120","ignore":false},{"path":"is/isSymbol","sig":"a -> Boolean","examples":[],"kind":"function","description":"Is symbol?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L126","ignore":false},{"path":"is/isUndefined","sig":"a -> Boolean","examples":["isUndefined(undefined); // true"],"kind":"function","description":"Is undefined?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L133","ignore":false},{"path":"is/isNumber","sig":"a -> Boolean","examples":["isNumber(10); // true\nisNumber(NaN); // false"],"kind":"function","description":"Is number?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L142","ignore":false},{"path":"is/isNegative","sig":"a -> Boolean","examples":["isNumber(-10); // true\nisNumber(10); // false"],"kind":"function","description":"Is negative?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L151","ignore":false},{"path":"is/isPositive","sig":"a -> Boolean","examples":["isNumber(10); // true\nisNumber(-10); // false"],"kind":"function","description":"Is positive?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L160","ignore":false},{"path":"is/isFloat","sig":"a -> Boolean","examples":["isFloat(1.23); // true\nisFloat(1); // false"],"kind":"function","description":"Is float?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L169","ignore":false},{"path":"is/isTruthy","sig":"a -> Boolean","examples":["isTruthy(1); // true"],"kind":"function","description":"Is truthy?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L176","ignore":false},{"path":"is/isFalsey","sig":"a -> Boolean","examples":["isFalsey(0); // true"],"kind":"function","description":"Is false?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L183","ignore":false},{"path":"is/isObject","sig":"a -> Boolean","examples":["isObject({}); // true\nisObject([]]); // false\nisObject(null); // false"],"kind":"function","description":"Is object?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L193","ignore":false},{"path":"is/isPromise","sig":"a -> Boolean","examples":["isPromise(Promise.resolve(1)); // true"],"kind":"function","description":"Is promise?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L204","ignore":false},{"path":"is/isStream","sig":"a -> Boolean","examples":[],"kind":"function","description":"Is stream?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L214","ignore":false},{"path":"is/isPojo","sig":"a -> Boolean","examples":["isPojo({}); // true"],"kind":"function","description":"Is \"plain old javascript object\"?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L224","ignore":false},{"path":"is/isIterator","sig":"a -> Boolean","examples":["const iterator = [][Symbol.iterator]();\nisIterator(iterator); // true"],"kind":"function","description":"Is iterator?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L236","ignore":false},{"path":"is/isIterable","sig":"a -> Boolean","examples":["isIterable([]); // true"],"kind":"function","description":"Is iterable?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L247","ignore":false},{"path":"is/isAsyncIterable","sig":"a -> Boolean","examples":[],"kind":"function","description":"Is async iterable?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L256","ignore":false},{"path":"iterable/async/map","sig":"(a -> Promise<b>) -> Iterable<a> -> AsyncIterator<b>","examples":["const iterator = from([1, 2, 3]);\nmap(async n => n * 2, iterator); // AsyncIterator<2, 4, 6>"],"kind":"function","description":"Applies a function to each of an async iterable's yielded items. Works on all iterables","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L32","ignore":false},{"path":"iterable/async/from","sig":"Iterable<a> -> AsyncIterator<a>","examples":["from([1, 2, 3]) // AsyncIterator<1, 2, 3>"],"kind":"function","description":"Returns an async iterator from an iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L42","ignore":false},{"path":"iterable/async/flatMap","sig":"(a -> Iterable<b>) -> Iterable<a> -> AsyncIterator<b>","examples":["const iterator = from([1, 2, 3])\n\n// AsyncIterator<1, 2, 2, 4, 3, 6>\nflatMap(async function* (n) {\n  yield await n;\n  yield await n * 2;\n}, iterator);"],"kind":"function","description":"Maps a function over an iterable and concatenates the results. a.k.a. \"chain\"","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L82","ignore":false},{"path":"iterable/async/of","sig":"...a -> AsyncIterator<a>","examples":["of(1, 2, 3); // AsyncIterator<1, 2, 3>"],"kind":"function","description":"Create an iterator of one or more (variadic) arguments","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L93","ignore":false},{"path":"iterable/async/reduce","sig":"((a, b) -> Promise<a>) -> a -> Iterable<b> -> Promise<a>","examples":["const iterator = from([1, 2, 3]);\nawait reduce((a, b) => a + b, 0, iterator); // 6"],"kind":"function","description":"reduce","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L109","ignore":false},{"path":"iterable/async/zipWith","sig":"((a, b) -> Promise<c>) -> Iterable<a> -> Iterable<b> -> AsyncIterator<c>","examples":[],"kind":"function","description":"zip with","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L140","ignore":false},{"path":"iterable/async/zip","sig":"Iterable<a> -> Iterable<b> -> AsyncIterator<[a, b]>","examples":["zip(from([1, 2, 3]), from([4, 5, 6])); // AsyncIterator<[1, 4], [2, 5], [3, 6]>"],"kind":"function","description":"\"zips\" two iterables into pairs of items from corresponding indices\nof the input iterables. truncated to shorter of two iterables","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L150","ignore":false},{"path":"iterable/async/rangeStep","sig":"Number -> Number -> Number -> AsyncIterator<Number>","examples":[],"kind":"function","description":"Iterates from 0 to n by with a step (exclusive)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L157","ignore":false},{"path":"iterable/async/range","sig":"Number -> Number -> AsyncIterator<Number>","examples":["range(0, 5) // AsyncIterator<0, 1, 2, 3, 4>"],"kind":"function","description":"Iterates from 0 to n - 1 (exclusive)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L169","ignore":false},{"path":"iterable/async/enumerate","sig":"Iterable<a> -> AsyncIterator<[Integer, a]>","examples":["const iterator = from(['zero', 'one', 'two'])\nenumerate(iterator); // AsyncIterator<[0, 'zero'], [1, 'one'], [2, 'two']>"],"kind":"function","description":"transform an iterable to an iterable of pairs of indices and their items","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L178","ignore":false},{"path":"iterable/async/slice","sig":"Integer -> Integer -> Iterable<a> -> AsyncIterator<a>","examples":[],"kind":"function","description":"Slice","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L194","ignore":false},{"path":"iterable/async/concat","sig":"Iterable<a> -> Iterable<a> -> AsyncIterator<a>","examples":["concat(from([1, 2, 3]), from([4, 5, 6])); // AsyncIterator<1, 2, 3, 4, 5, 6>"],"kind":"function","description":"Yield all items from one iterator, then the other","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L206","ignore":false},{"path":"iterable/async/prepend","sig":"a -> Iterable<a> -> AsyncIterator<a>","examples":[],"kind":"function","description":"Prepend an item `a` to the end of an iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L215","ignore":false},{"path":"iterable/async/append","sig":"a -> Iterable<a> -> AsyncIterator<a>","examples":[],"kind":"function","description":"Append an item `a` to the start of an iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L221","ignore":false},{"path":"iterable/async/forEach","sig":"(a -> Promise<b>) -> Iterable<a> -> AsyncIterator<a>","examples":[],"kind":"function","description":"run a function (side-effect) once for each item","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L227","ignore":false},{"path":"iterable/async/filter","sig":"(a -> Promise<Boolean>) -> Iterable<a> -> AsyncIterator<a>","examples":[],"kind":"function","description":"yield only items that pass the predicate","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L236","ignore":false},{"path":"iterable/async/reject","sig":"(a -> Promise<Boolean>) -> Iterable<a> -> AsyncIterator<a>","examples":[],"kind":"function","description":"Yield only items that do not pass the predicate","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L244","ignore":false},{"path":"iterable/async/unnest","sig":"Iterable<Iterable<a>> -> AsyncIterator<a>","examples":[],"kind":"function","description":"Flattens one level of a nested iterable of iterables","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L261","ignore":false},{"path":"iterable/async/flatIterate","sig":"(a -> Iterable<a>) -> a -> AsyncIterator<a>","examples":[],"kind":"function","description":"Flat iterate","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L285","ignore":false},{"path":"iterable/async/iterate","sig":"(a -> Promise<a>) -> a -> AsyncIterator<a>","examples":[],"kind":"function","description":"Iterate infinitely, yielding items from seed through a predicate","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L293","ignore":false},{"path":"iterable/async/some","sig":"(a -> Promise<Boolean>) -> Iterable<a> -> Promise<Boolean>","examples":[],"kind":"function","description":"Does any item pass the predicate?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L302","ignore":false},{"path":"iterable/async/none","sig":"(a -> Promise<Boolean>) -> Iterable<a> -> Promise<Boolean>","examples":[],"kind":"function","description":"Do all items fail the predicate?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L311","ignore":false},{"path":"iterable/async/unique","sig":"Iterable<a> -> AsyncIterator<a>","examples":["unique(from([1, 1, 2, 3, 4, 4, 4])) // AsyncIterator<1, 2, 3, 4>"],"kind":"function","description":"Yield only the unique items in an iterable (by strict equality)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L332","ignore":false},{"path":"iterable/async/take","sig":"Integer -> Iterable<a> -> AsyncIterator<a>","examples":[],"kind":"function","description":"Yield only the first n items of an iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L345","ignore":false},{"path":"iterable/async/drop","sig":"Integer -> Iterable<a> -> AsyncIterator<a>","examples":[],"kind":"function","description":"Drop the first n items of an iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L354","ignore":false},{"path":"iterable/async/tail","sig":"Iterable<a> -> AsyncIterator<a>","examples":[],"kind":"function","description":"Yield all but the first item","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L360","ignore":false},{"path":"iterable/async/repeat","sig":"a -> Iterator<a>","examples":[],"kind":"function","description":"Infinitely yield an item (a)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L366","ignore":false},{"path":"iterable/async/times","sig":"Integer -> a -> AsyncIterator<a>","examples":[],"kind":"function","description":"Yield an item (a) n times. aka replicate","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L372","ignore":false},{"path":"iterable/async/length","sig":"Iterable<a> -> Promise<Integer>","examples":[],"kind":"function","description":"Get length of iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L378","ignore":false},{"path":"iterable/async/sumBy","sig":"(a -> Promise<Number>) -> Iterable<a> -> Promise<Number>","examples":[],"kind":"function","description":"Sum by","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L388","ignore":false},{"path":"iterable/async/sum","sig":"Iterable<Number> -> Promise<Number>","examples":[],"kind":"function","description":"Sum","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L400","ignore":false},{"path":"iterable/async/max","sig":"Iterable<Number> -> Promise<Number>","examples":[],"kind":"function","description":"Max","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L409","ignore":false},{"path":"iterable/async/toArray","sig":"Iterable<a> -> Promise<[a]>","examples":[],"kind":"function","description":"Transforms an iterable to an array. exhasts input","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L415","ignore":false},{"path":"iterable/async/every","sig":"(a -> Promise<Boolean>) -> Iterable<a> -> Promise<Boolean>","examples":[],"kind":"function","description":"Do all items pass their predicate?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L430","ignore":false},{"path":"iterable/async/find","sig":"(a -> Promise<Boolean>) -> Iterable<a> -> Promise<a|undefined>","examples":[],"kind":"function","description":"Find","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L440","ignore":false},{"path":"iterable/async/findIndex","sig":"(a -> Promise<Boolean>) -> Iterable<a> -> Promise<Integer>","examples":[],"kind":"function","description":"Find index","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L449","ignore":false},{"path":"iterable/async/exhaust","sig":"Iterable<a> -> Promise<undefined>","examples":[],"kind":"function","description":"Yield all items","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L461","ignore":false},{"path":"iterable/async/takeWhile","sig":"(a -> Promise<Boolean>) -> Iterable<a> -> AsyncIterator<a>","examples":[],"kind":"function","description":"Take while","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L469","ignore":false},{"path":"iterable/async/dropWhile","sig":"(a -> Promise<Boolean>) -> Iterable<a> -> AsyncIterator<a>","examples":[],"kind":"function","description":"Drop while","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L480","ignore":false},{"path":"iterable/async/reverse","sig":"Iterable<a> -> AsyncIterator<a>","examples":["reverse(from([1, 2, 3])); // AsyncIterator<3, 2, 1>"],"kind":"function","description":"Reverse","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L493","ignore":false},{"path":"iterable/async/group","sig":"Iterable<a> -> AsyncIterator<[a]>","examples":[],"kind":"function","description":"Group","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L556","ignore":false},{"path":"iterable/async/splitEvery","sig":"Integer -> Iterable<a> -> AsyncIterator<[a]>","examples":["// AsyncIterator<[0, 1, 2], [3, 4, 5], [6, 7, 8]>\nsplitEvery(3, from([0, 1, 2, 3, 4, 5, 6, 7, 8]));"],"kind":"function","description":"Yield groups of length n","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L586","ignore":false},{"path":"iterable/async/splitAt","sig":"Integer -> Iterable<a> -> [AsyncIterator<a>, AsyncIterator<a>]","examples":["// [AsyncIterator<0, 1, 2, 3, 4>, AsyncIterator<5, 6>]\nsplitAt(4, from([0, 1, 2, 3, 4, 5, 6]));"],"kind":"function","description":"Split an iterable into a pair of iterables at a particular index","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L604","ignore":false},{"path":"iterable/async/partition","sig":"(a -> Promise<Boolean>) -> Iterable<a> -> [AsyncIterator<a>, AsyncIterator<a>]","examples":["// [AsyncIterator<0, 1, 2>, AsyncIterator<3, 4, 5, 6>]\npartition(n => n < 3, from([0, 1, 2, 3, 4, 5, 6]));"],"kind":"function","description":"Split an iterable into a pair of iterables based on the truthiness of their predicate","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L616","ignore":false},{"path":"iterable/async/cycleN","sig":"Integer -> Iterable<a> -> AsyncIterator<a>","examples":[],"kind":"function","description":"Yield all items from an iterator, n times","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L625","ignore":false},{"path":"iterable/async/cycle","sig":"Iterable<a> -> AsyncIterator<a>","examples":["const iterator = from([1, 2, 3]);\ncycle(iterator); // AsyncIterator<1, 2, 3, 1, 2, 3, ...>"],"kind":"function","description":"yield iterable items cyclically, infinitely looping when exhausted","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L639","ignore":false},{"path":"iterable/async/joinWith","sig":"String -> Iterable<a> -> Promise<String>","examples":["const iterator = from(['some', 'slug', 'parts']);\nawait joinWith('-', iterator); // 'some-slug-parts';"],"kind":"function","description":"Serialize iterator items to a string with an arbitrary spacer","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L666","ignore":false},{"path":"iterable/async/join","sig":"Iterable<a> -> Promise<String>","examples":["const iterator = from(['a', 'b', 'c', 'd', 'e']);\nawait join(iterator); // 'abcde';"],"kind":"function","description":"Serialize iterator items to a string","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L678","ignore":false},{"path":"iterable/async/isEmpty","sig":"Iterable<a> -> Promise<Boolean>","examples":["await isEmpty(from([])); // true\nawait isEmpty(from([1])); // false"],"kind":"function","description":"Is an iterable empty? (done or length = 0)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L687","ignore":false},{"path":"iterable/async/indices","sig":"Iterable<a> -> AsyncIterator<Integer>","examples":["indices(from(['a', 'b', 'c'])); // AsyncIterator<0, 1, 2>"],"kind":"function","description":"Get an iterator of indices (0 to length - 1)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L711","ignore":false},{"path":"iterable/async/padTo","sig":"Integer -> a -> Iterable<a> -> AsyncIterator<a>","examples":["padTo(6, 'd', from(['a', 'b', 'c'])); // AsyncIterator<'a', 'b', 'c', 'd', 'd', 'd'>"],"kind":"function","description":"Pad an iterable with with a finite number of items `a`","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L719","ignore":false},{"path":"iterable/async/pad","sig":"a -> Iterable<a> -> AsyncIterator<a>","examples":["pad('d', from(['a', 'b', 'c'])); // AsyncIterator<'a', 'b', 'c', 'd', 'd', 'd', ...>"],"kind":"function","description":"Pad iterable with an infinite number of items `a`","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L731","ignore":false},{"path":"iterable/async","sig":null,"examples":[],"kind":"module","description":"Async iterable functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/index.js#L1","ignore":false},{"path":"iterable/sync","sig":null,"examples":[],"kind":"module","description":"Sync iterable functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/index.js#L6","ignore":false},{"path":"iterable/sync/from","sig":"Iterable<a> -> Iterator<a>","examples":["from([1, 2, 3]) // Iterator<1, 2, 3>"],"kind":"function","description":"Returns an iterator from an iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L28","ignore":false},{"path":"number/random","sig":"Integer -> Integer -> Integer","examples":["random(0, 100); // 42"],"kind":"function","description":"Get a random number between two inclusive bounds","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/number/index.js#L8","ignore":false},{"path":"object/firstPair","sig":"{ k: v } -> [k, v]","examples":["firstPair({ a: 1 }); // ['a', 1]"],"kind":"function","description":"Get an object's first key: value pair","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L16","ignore":false},{"path":"object/firstKey","sig":"{ k: v } -> k","examples":["firstKey({ a: 1 }); // 'a'"],"kind":"function","description":"Get an object's first key","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L23","ignore":false},{"path":"object/firstValue","sig":"{ k: v } -> v","examples":["firstValue({ a: 1 }); // 1"],"kind":"function","description":"Get an object's first value","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L30","ignore":false},{"path":"object/mapPairs","sig":"([a, b] -> [c, d]) -> { a: b } -> { c: d }","examples":["mapPairs(R.reverse, { a: 1, b: 2 }); // { 1: 'a', 2: 'b' }"],"kind":"function","description":"Map object key / value pairs","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L47","ignore":false},{"path":"object/mapKeys","sig":"(k -> k) -> { k: v } -> { k: v }","examples":["mapKeys(R.reverse, { one: 1, two: 2 }); // { eno: 1, owt: 2 }"],"kind":"function","description":"Map object keys","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L56","ignore":false},{"path":"object/deepFreeze","sig":"{*} -> {*}","examples":["deepFreeze({ a: 1 }); // { a: 1 }"],"kind":"function","description":"recursive + mutating + identity","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L71","ignore":false},{"path":"object/toHumanJSON","sig":"JSON -> String","examples":[],"kind":"function","description":"Serialize to JSON with newlines and indentation","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L103","ignore":false},{"path":"process/onSigInt","sig":null,"examples":[],"kind":"function","description":"On SIGINT","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/process/index.js#L4","ignore":false},{"path":"stream/toString","sig":"Stream -> String","examples":[],"kind":"function","description":"Stream to string","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/stream/index.js#L8","ignore":false},{"path":"stream/fromString","sig":"String -> Stream","examples":[],"kind":"function","description":"String to stream","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/stream/index.js#L23","ignore":false},{"path":"string/capitalize","sig":"String -> String","examples":["capitalize('hello'); // 'Hello'"],"kind":"function","description":"Capitalize the first letter of a string","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/string/index.js#L36","ignore":false},{"path":"string/template","sig":"String -> {*} -> String","examples":["template('Hello ${ name }!', { name: 'Pat' }); // 'Hello Pat!'"],"kind":"function","description":"String interpolation. Reasonably similar to JavaScript template literals.","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/string/index.js#L47","ignore":false},{"path":"string/toBase64","sig":"String -> String","examples":["toBase64('hello'); // 'aGVsbG8='"],"kind":"function","description":"Encode a string to base64","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/string/index.js#L64","ignore":false},{"path":"string/parseBase64","sig":"String -> String","examples":["parseBase64('aGVsbG8='); // 'hello'"],"kind":"function","description":"Decode a string from base64","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/string/index.js#L71","ignore":false},{"path":"string/slugify","sig":"String -> String","examples":["slugify('Hello World!'); // 'hello-world'"],"kind":"function","description":"Slugify a string","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/string/index.js#L78","ignore":false},{"path":"url/isDataUrl","sig":"a -> Boolean","examples":[],"kind":"function","description":"Is a string a data url","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/url/index.js#L10","ignore":false},{"path":"url/parseDataUrl","sig":"String -> { mediatype, data, base64 }","examples":[],"kind":"function","description":"Parse Data URL","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/url/index.js#L16","ignore":false},{"path":"uuid/uuid","sig":"a -> String","examples":["uuid(); // 'c4f2e775-a5f9-4796-bd31-46e544bfab06'"],"kind":"function","description":"Random UUID v4","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/uuid/index.js#L10","ignore":false},{"path":"uuid/isUuid","sig":"a -> Boolean","examples":["isUuid('c4f2e775-a5f9-4796-bd31-46e544bfab06'); // true"],"kind":"function","description":"Is UUID v4?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/uuid/index.js#L23","ignore":false}]}}},"pageContext":{}}