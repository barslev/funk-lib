{"data":{"site":{"siteMetadata":{"jsdocs":[{"path":"array/toObj","sig":"[ k: v ] -> { k: v }","examples":["toObj(['a', 'b', 'c']) // { 0: a, 1: b, 2: c }"],"description":"Transform an array into an object, where keys are indices, and values are elements.","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/array/index.js#L18","ignore":null},{"path":"array/toObjBy","sig":"(a -> b) -> [a] -> { b: a }","examples":[],"description":"Given a function that generates a key, turns a list of objects into an object indexing the objects by the given key","deprecated":true,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/array/index.js#L26","ignore":true},{"path":"array/sample","sig":"[t] -> t","examples":["sample([0, 1, 2, 3, 4, 5]) // 2"],"description":"Select a random array item","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/array/index.js#L37","ignore":null},{"path":"array/shuffle","sig":"[t] -> [t]","examples":["shuffle([1, 2, 3, 4, 5]) // [4, 1, 2, 5, 3]"],"description":"Immutably randomize array element order\nFisher-Yates shuffle","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/array/index.js#L47","ignore":null},{"path":"async/all","sig":"[Promise<t>] -> [t]","examples":[],"description":"parallel resolve promises","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L18","ignore":null},{"path":"async/race","sig":"[Promise<t>] -> t","examples":[],"description":"race","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L25","ignore":null},{"path":"async/delay","sig":"Number -> undefined","examples":[],"description":"delay","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L32","ignore":null},{"path":"async/toAsync","sig":"(a -> b) -> (a -> Promise<b>)","examples":[],"description":"wraps a function to always return a promise","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L39","ignore":null},{"path":"async/promisify","sig":"?","examples":[],"description":"make an errback-calling function promise-returning\ninverse of callbackify","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L58","ignore":null},{"path":"async/deferred","sig":"* -> Object","examples":[],"description":"creates an externally controlled promise","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L76","ignore":null},{"path":"async/reduce","sig":"((a, t) -> Promise<a>) -> a -> [t] -> Promise<a>","examples":[],"description":"reduce","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L93","ignore":null},{"path":"async/pipe","sig":"(...f) -> f","examples":[],"description":"serial + async R.pipe. works with sync or async functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L103","ignore":null},{"path":"async/pipeC","sig":"(...f) -> f","examples":[],"description":"curried async pipe","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L112","ignore":null},{"path":"async/mapLimit","sig":"(a -> b) -> [a] -> [b]","examples":[],"description":"map limit","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L119","ignore":null},{"path":"async/mapPairsLimit","sig":"Number -> ([a, b] -> [c, d]) -> { a: b } -> { c: d }","examples":[],"description":"map pairs limit","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L146","ignore":null},{"path":"async/forEachLimit","sig":"Number -> (a -> b) -> [a] -> [a]","examples":[],"description":"for each limit","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L155","ignore":null},{"path":"async/everyLimit","sig":"Number -> (a -> Boolean) -> [a] -> Boolean","examples":[],"description":"every limit","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L165","ignore":null},{"path":"async/someLimit","sig":"Number -> (a -> Boolean) -> [a] -> Boolean","examples":[],"description":"some limit","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L179","ignore":null},{"path":"async/findLimit","sig":"Number -> (a -> Boolean) -> [a]","examples":[],"description":"find limit","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L193","ignore":null},{"path":"async/flatMapLimit","sig":"Number -> (a -> [b]) -> [a] -> [b]","examples":["const array = [1, 2, 3];\n\n// [1, 2, 2, 4, 3, 6]\nawait flatMapLimit(2, async n => [n, n * 2], array)"],"description":"flat map limit","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L214","ignore":null},{"path":"async/filterLimit","sig":"Number -> (a -> Boolean) -> [a] -> [a]","examples":[],"description":"filter limit","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L221","ignore":null},{"path":"async/allSettledLimit","sig":"Number -> [Promise] -> [Object]","examples":[],"description":"all settled limit","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L230","ignore":null},{"path":"async/map","sig":"(a -> Promise<b>) -> [a] -> Promise<[b]>","examples":[],"description":"map limit","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L244","ignore":null},{"path":"async/mapSeries","sig":"(a -> Promise<b>) -> [a] -> Promise<[b]>","examples":[],"description":"map series","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L251","ignore":null},{"path":"async/mapPairs","sig":"([a, b] -> Promise<[c, d]>) -> { a: b } -> Promise<{ c: d }>","examples":[],"description":"map pairs","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L258","ignore":null},{"path":"async/mapPairsSeries","sig":"([a, b] -> Promise<[c, d]>) -> { a: b } -> Promise<{ c: d }>","examples":[],"description":"map pairs series","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L265","ignore":null},{"path":"async/forEach","sig":"(a -> b) -> [a] -> [a]","examples":[],"description":"parallel for each","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L272","ignore":null},{"path":"async/forEachSeries","sig":"(a -> b) -> [a] -> [a]","examples":[],"description":"for each series","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L279","ignore":null},{"path":"async/every","sig":"(a -> Boolean) -> [a] -> Boolean","examples":[],"description":"parallel every","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L286","ignore":null},{"path":"async/everySeries","sig":"(a -> Boolean) -> [a] -> Boolean","examples":[],"description":"every series","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L293","ignore":null},{"path":"async/some","sig":"(a -> Boolean) -> [a] -> Boolean","examples":[],"description":"parallel some","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L300","ignore":null},{"path":"async/someSeries","sig":"(a -> Boolean) -> [a] -> Boolean","examples":[],"description":"some series","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L307","ignore":null},{"path":"async/find","sig":"(t -> Boolean) -> [t] -> t","examples":[],"description":"parallel find","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L314","ignore":null},{"path":"async/findSeries","sig":"(t -> Boolean) -> [t] -> t","examples":[],"description":"find series","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L321","ignore":null},{"path":"async/flatMap","sig":"(a -> [b]) -> [a] -> [b]","examples":["const array = [1, 2, 3];\n\n// [1, 2, 2, 4, 3, 6]\nawait flatMap(async n => [n, n * 2], array)"],"description":"parallel flatMap (chain)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L333","ignore":null},{"path":"async/flatMapSeries","sig":"(a -> [b]) -> [a] -> [b]","examples":["const array = [1, 2, 3];\n\n// [1, 2, 2, 4, 3, 6]\nawait flatMapSeries(async n => [n, n * 2], array)"],"description":"flatMap series (chain)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L345","ignore":null},{"path":"async/filter","sig":"(a -> Boolean) -> [a] -> [a]","examples":["const array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n// [0, 1, 2, 3, 4, 5]\nawait filter(async n => (n <= 5), array);"],"description":"parallel filter","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L356","ignore":null},{"path":"async/filterSeries","sig":"(a -> Boolean) -> [a] -> [a]","examples":["const array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n// [0, 1, 2, 3, 4, 5]\nawait filterSeries(async n => (n <= 5), array);"],"description":"filter series","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L367","ignore":null},{"path":"async/allSettled","sig":"[Promise] -> [Object]","examples":[],"description":"parallel all settled","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L374","ignore":null},{"path":"async/allSettledSeries","sig":"[Promise] -> [Object]","examples":[],"description":"all settled series","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L381","ignore":null},{"path":"async/props","sig":"{ a: Promise<b> } -> Promise<{ a: b }>","examples":["// { one: 1, two: 2 }\nawait props({\n one: Promise.resolve(1),\n two: Promise.resolve(2),\n})"],"description":"parallel props","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L394","ignore":null},{"path":"async/evolve","sig":"{ k: (a -> Promise<b>) } -> { k: a } -> Promise<{ k: b }>","examples":[],"description":"Async R.evolve","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L401","ignore":null},{"path":"async/timeout","sig":"number -> Promise<t> -> Promise<t>","examples":[],"description":"timeout a promise","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L408","ignore":null},{"path":"color/hexToRgb","sig":"string -> { r, g, b }","examples":[],"description":"hex to rgb","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L77","ignore":null},{"path":"crypto/md5","sig":"string -> string","examples":[],"description":"md5 hash","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/crypto/index.js#L20","ignore":null},{"path":"crypto/sha256","sig":"string -> string","examples":[],"description":"sha256 hash","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/crypto/index.js#L26","ignore":null},{"path":"crypto/sha512","sig":"string -> string","examples":[],"description":"sha512 hash","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/crypto/index.js#L32","ignore":null},{"path":"function/pipeC","sig":"...f -> f","examples":[],"description":"curried pipe","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/function/index.js#L8","ignore":null},{"path":"function/on","sig":"(b -> b -> c) -> (a -> b) -> a -> a -> c","examples":["const records = [{ age: 9 }, { age: 1 }, { age: 3 }];\n\n// [{ age: 1 }, { age: 3 }, { age: 9 }]\nR.sort(on(R.subtract, R.prop('age'))), records);"],"description":"on","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/function/index.js#L19","ignore":null},{"path":"function/once","sig":"(a -> b) -> (a -> b)","examples":[],"description":"once","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/function/index.js#L25","ignore":null},{"path":"function/noop","sig":"* -> undefined","examples":[],"description":"\"no-op\"","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/function/index.js#L41","ignore":null},{"path":"is/isDate","sig":"* -> boolean","examples":[],"description":"Test for date type","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L45","ignore":null},{"path":"iterable/async/map","sig":"(A -> Promise<B>) -> Iterable<A> -> AsyncIterator<B>","examples":["const iterator = from([1, 2, 3])\n\n// from([2, 4, 6])\nmap(async n => n * 2, iterator)"],"description":"Applies a function to each of an async iterable's yielded items. Works on all iterables","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L34","ignore":null},{"path":"iterable/async/from","sig":"Iterable<t> -> AsyncIterator<t>","examples":["from([1, 2, 3]) // AsyncIterator<1, 2, 3>"],"description":"Returns an async iterator from an iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L44","ignore":null},{"path":"iterable/async/flatMap","sig":"(a -> Iterable<b>) -> Iterable<a> -> AsyncIterator<b>","examples":["const iter = from([1, 2, 3])\n\n// from([1, 2, 2, 4, 3, 6])\nflatMap(async function* (n) {\n  yield await n;\n  yield await n * 2;\n}, iter)"],"description":"Maps a function over an iterable and concatenates the results. a.k.a. \"chain\"","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L84","ignore":null},{"path":"iterable/async/of","sig":"t... -> AsyncIterator<t>","examples":["of(1, 2, 3) // AsyncIterator<1, 2, 3>"],"description":"Create an iterator of one or more (variadic) arguments","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L95","ignore":null},{"path":"iterable/async/reduce","sig":"((a, t) -> Promise<a>) -> a -> Iterable<t> -> Promise<a>","examples":["const iterator = from([1, 2, 3]);\nawait reduce((a, b) => a + b, 0, iterator); // 6"],"description":"reduce","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L111","ignore":null},{"path":"iterable/async/rangeStep","sig":"Number -> Number -> Number -> AsyncIterator<Number>","examples":[],"description":"iterates from 0 to n by with a step (exclusive)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L151","ignore":null},{"path":"iterable/async/range","sig":"Number -> Number -> AsyncIterator<Number>","examples":["range(0, 5) // from([0, 1, 2, 3, 4])"],"description":"iterates from 0 to n - 1 (exclusive)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L163","ignore":null},{"path":"iterable/async/enumerate","sig":"Iterable<t> -> AsyncIterator<[Integer, t]>","examples":["const iterator = from(['zero', 'one', 'two'])\nenumerate(iterator) // from([[0, 'zero'], [1, 'one'], [2, 'two']])"],"description":"transform an iterable to an iterable of pairs of indices and their items","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L172","ignore":null},{"path":"iterable/async/slice","sig":"Integer -> Integer -> Iterable<T> -> AsyncIterator<T>","examples":[],"description":"slice","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L188","ignore":null},{"path":"iterable/async/filter","sig":"(t -> Promise<Boolean>) -> Iterable<t> -> AsyncIterator<t>","examples":[],"description":"yield only items that pass the predicate","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L221","ignore":null},{"path":"iterable/async/iterate","sig":"(t -> Promise<t>) -> t -> AsyncIterator<t>","examples":[],"description":"iterate infinitely, yielding items from seed through a predicate","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L270","ignore":null},{"path":"iterable/async/none","sig":"(t -> Promise<Boolean>) -> Iterable<t> -> Promise<Boolean>","examples":[],"description":"do all items fail the predicate?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L288","ignore":null},{"path":"iterable/async/every","sig":"(t -> Promise<Boolean>) -> Iterable<t> -> Promise<Boolean>","examples":[],"description":"do all items pass their predicate?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L379","ignore":null},{"path":"iterable/async/group","sig":"Iterable<T> -> AsyncIterator<[T]>","examples":[],"description":"group","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L485","ignore":null},{"path":"iterable/async/cycle","sig":"Iterable<T> -> AsyncIterator<T>","examples":["const iterator = from([1, 2, 3]);\ncycle(iterator) // AsyncIterator<1, 2, 3, 1, 2, 3, ...>"],"description":"yield iterable items cyclically, infinitely looping when exhausted","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L551","ignore":null},{"path":"number/random","sig":"int -> int -> int","examples":[],"description":"inclusive bounds","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/number/index.js#L7","ignore":null},{"path":"object/mapPairs","sig":"([k, v] -> [l, m]) -> { k: v } -> { l: m }","examples":[],"description":"map object pairs","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L32","ignore":null},{"path":"object/mapKeys","sig":"(k -> m) -> { k: v } -> { m: v }","examples":[],"description":"map object keys","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L40","ignore":null},{"path":"object/deepFreeze","sig":"object -> object","examples":[],"description":"recursive + mutating + identity","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L54","ignore":null},{"path":"object/toHumanJSON","sig":"json -> string","examples":[],"description":"serialize to json with newlines and indentation","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L86","ignore":null},{"path":"stream/toString","sig":"stream -> string","examples":[],"description":"stream to string","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/stream/index.js#L8","ignore":null},{"path":"stream/fromString","sig":"string -> stream","examples":[],"description":"string to stream","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/stream/index.js#L23","ignore":null},{"path":"string/capitalize","sig":"string -> string","examples":[],"description":"capitalize the first letter of a string","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/string/index.js#L35","ignore":null},{"path":"string/template","sig":"string -> object -> string","examples":[],"description":"reasonably similar to js template literals","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/string/index.js#L45","ignore":null},{"path":"string/slugify","sig":"string -> string","examples":[],"description":"slugify","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/string/index.js#L66","ignore":null}]}}},"pageContext":{}}