{"data":{"site":{"siteMetadata":{"version":"0.15.0","jsdocs":[{"path":"array/toObj","sig":"[ k: v ] -> { k: v }","examples":["toObj(['a', 'b', 'c']); // { 0: a, 1: b, 2: c }"],"description":"Transform an array into an object, where keys are indices, and values are elements.","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/array/index.js#L18","ignore":null},{"path":"array/toObjBy","sig":"(a -> b) -> [a] -> { b: a }","examples":[],"description":"Given a function that generates a key, turns a list of objects into an object indexing the objects by the given key","deprecated":true,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/array/index.js#L26","ignore":true},{"path":"array/sample","sig":"[t] -> t","examples":["sample([0, 1, 2, 3, 4, 5]); // 2"],"description":"Select a random array item","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/array/index.js#L37","ignore":null},{"path":"array/shuffle","sig":"[t] -> [t]","examples":["shuffle([1, 2, 3, 4, 5]); // [4, 1, 2, 5, 3]"],"description":"Immutably randomize array element order\nFisher-Yates shuffle","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/array/index.js#L47","ignore":null},{"path":"async/all","sig":"[Promise<t>] -> [t]","examples":[],"description":"Resolve promises in parallel","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L18","ignore":null},{"path":"async/race","sig":"[Promise<t>] -> t","examples":[],"description":"Race","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L25","ignore":null},{"path":"async/delay","sig":"Number -> undefined","examples":[],"description":"delay","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L32","ignore":null},{"path":"async/toAsync","sig":"(a -> b) -> (a -> Promise<b>)","examples":[],"description":"wraps a function to always return a promise","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L39","ignore":null},{"path":"async/fromCallback","sig":null,"examples":["await fromCallback(cb => cb(null, 123)); // 123\nawait fromCallback(cb => cb(Error('oops'))); // Error('oops')"],"description":"Returns a promise that is resolved by an err-back function","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L47","ignore":null},{"path":"async/promisify","sig":null,"examples":["const callback = (n, cb) => cb(null, n + 1);\nawait promisify(callback)(1); // 2"],"description":"Make an errback-calling function promise-returning. Inverse of callbackify","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L64","ignore":null},{"path":"async/deferred","sig":"* -> Object","examples":[],"description":"creates an externally controlled promise","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L82","ignore":null},{"path":"async/reduce","sig":"((a, b) -> Promise<a>) -> a -> [b] -> Promise<a>","examples":[],"description":"Async reduce","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L99","ignore":null},{"path":"async/pipe","sig":"(...f) -> f","examples":[],"description":"serial + async R.pipe. works with sync or async functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L109","ignore":null},{"path":"async/pipeC","sig":"(...f) -> f","examples":[],"description":"Curried async pipe","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L118","ignore":null},{"path":"async/mapLimit","sig":"Number -> (a -> Promise<b>) -> [a] -> Promise<[b]>","examples":["// [2, 4, 6, 8, 10]\nawait mapLimit(2, async n => n * 2, [1, 2, 3, 4, 5]);"],"description":"Map with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L128","ignore":null},{"path":"async/mapPairsLimit","sig":"Number -> ([a, b] -> Promise<[c, d]>) -> { a: b } -> Promise<{ c: d }>","examples":[],"description":"Map pairs with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L155","ignore":null},{"path":"async/forEachLimit","sig":"Number -> (a -> Promise<b>) -> [a] -> Promise<[a]>","examples":[],"description":"For each with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L164","ignore":null},{"path":"async/everyLimit","sig":"Number -> (a -> Promise<Boolean>) -> [a] -> Promise<Boolean>","examples":[],"description":"Every with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L174","ignore":null},{"path":"async/someLimit","sig":"Number -> (a -> Promise<Boolean>) -> [a] -> Promise<Boolean>","examples":[],"description":"Some with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L188","ignore":null},{"path":"async/findLimit","sig":"Number -> (a -> Promise<Boolean>) -> [a] -> Promise<a>","examples":[],"description":"Find with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L202","ignore":null},{"path":"async/flatMapLimit","sig":"Number -> (a -> Promise<[b]>) -> [a] -> Promise<[b]>","examples":["const array = [1, 2, 3];\n\n// [1, 2, 2, 4, 3, 6]\nawait flatMapLimit(2, async n => [n, n * 2], array);"],"description":"Flat map (aka. \"chain\") with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L223","ignore":null},{"path":"async/filterLimit","sig":"Number -> (a -> Promise<Boolean>) -> [a] -> Promise<[a]>","examples":[],"description":"Filter with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L230","ignore":null},{"path":"async/allSettledLimit","sig":"Number -> [Promise] -> Promise<[Object]>","examples":[],"description":"All settled with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L239","ignore":null},{"path":"async/map","sig":"(a -> Promise<b>) -> [a] -> Promise<[b]>","examples":[],"description":"Parallel map","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L253","ignore":null},{"path":"async/mapSeries","sig":"(a -> Promise<b>) -> [a] -> Promise<[b]>","examples":[],"description":"Serial map","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L260","ignore":null},{"path":"async/mapPairs","sig":"([a, b] -> Promise<[c, d]>) -> { a: b } -> Promise<{ c: d }>","examples":[],"description":"Parallel map pairs","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L267","ignore":null},{"path":"async/mapPairsSeries","sig":"([a, b] -> Promise<[c, d]>) -> { a: b } -> Promise<{ c: d }>","examples":[],"description":"Serial map pairs","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L274","ignore":null},{"path":"async/forEach","sig":"(a -> Promise<b>) -> [a] -> Promise<[a]>","examples":[],"description":"Parallel for each","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L281","ignore":null},{"path":"async/forEachSeries","sig":"(a -> Promise<b>) -> [a] -> Promise<[a]>","examples":[],"description":"Serial for each","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L288","ignore":null},{"path":"async/every","sig":"(a -> Promise<Boolean>) -> [a] -> Promise<Boolean>","examples":[],"description":"Parallel every","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L295","ignore":null},{"path":"async/everySeries","sig":"(a -> Promise<Boolean>) -> [a] -> Promise<Boolean>","examples":[],"description":"Serial every","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L302","ignore":null},{"path":"async/some","sig":"(a -> Promise<Boolean>) -> [a] -> Promise<Boolean>","examples":[],"description":"Parallel some","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L309","ignore":null},{"path":"async/someSeries","sig":"(a -> Promise<Boolean>) -> [a] -> Promise<Boolean>","examples":[],"description":"Serial some","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L316","ignore":null},{"path":"async/find","sig":"(a -> Promise<Boolean>) -> [a] -> Promise<a>","examples":[],"description":"Parallel find","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L323","ignore":null},{"path":"async/findSeries","sig":"(a -> Promise<Boolean>) -> [a] -> Promise<a>","examples":[],"description":"Serial find","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L330","ignore":null},{"path":"async/flatMap","sig":"(a -> Promise<[b]>) -> [a] -> Promise<[b]>","examples":["const array = [1, 2, 3];\n\n// [1, 2, 2, 4, 3, 6]\nawait flatMap(async n => [n, n * 2], array);"],"description":"Parallel flatMap (aka. \"chain\")","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L342","ignore":null},{"path":"async/flatMapSeries","sig":"(a -> Promise<[b]>) -> [a] -> Promise<[b]>","examples":["const array = [1, 2, 3];\n\n// [1, 2, 2, 4, 3, 6]\nawait flatMapSeries(async n => [n, n * 2], array);"],"description":"Serial flatMap (aka. \"chain\")","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L354","ignore":null},{"path":"async/filter","sig":"(a -> Promise<Boolean>) -> [a] -> Promise<[a]>","examples":["const array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n// [0, 1, 2, 3, 4, 5]\nawait filter(async n => (n <= 5), array);"],"description":"Parallel filter","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L365","ignore":null},{"path":"async/filterSeries","sig":"(a -> Promise<Boolean>) -> [a] -> Promise<[a]>","examples":["const array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n// [0, 1, 2, 3, 4, 5]\nawait filterSeries(async n => (n <= 5), array);"],"description":"Serial filter","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L376","ignore":null},{"path":"async/allSettled","sig":"[Promise] -> Promise<[Object]>","examples":[],"description":"Parallel all settled","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L383","ignore":null},{"path":"async/allSettledSeries","sig":"[Promise] -> Promise<[Object]>","examples":[],"description":"Serial all settled","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L390","ignore":null},{"path":"async/props","sig":"{ k: Promise<v> } -> Promise<{ k: v }>","examples":["// { one: 1, two: 2 }\nawait props({\n one: Promise.resolve(1),\n two: Promise.resolve(2),\n})"],"description":"Parallel props","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L403","ignore":null},{"path":"async/evolve","sig":"{ k: (a -> Promise<b>) } -> { k: a } -> Promise<{ k: b }>","examples":[],"description":"Async R.evolve","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L410","ignore":null},{"path":"async/timeout","sig":"Number -> Promise<a> -> Promise<a>","examples":[],"description":"Timeout a promise","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L417","ignore":null},{"path":"color/rgbToHsl","sig":"{ r, g, b } -> { h, s, l }","examples":[],"description":"rgb to hsl","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L13","ignore":null},{"path":"color/hslToRgb","sig":"{ h, s, l } -> { r, g, b }","examples":[],"description":"hsl to rgb","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L48","ignore":null},{"path":"color/hexToRgb","sig":"String -> { r, g, b }","examples":[],"description":"hex to rgb","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L83","ignore":null},{"path":"color/rgbToHex","sig":"{ r, g, b } -> String","examples":[],"description":"rgb to hex","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L103","ignore":null},{"path":"color/hslToHex","sig":"{ h, s, l } -> String","examples":[],"description":"hsl to hex","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L115","ignore":null},{"path":"color/hexToHsl","sig":"String -> { h, s, l }","examples":[],"description":"hex to hsl","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L121","ignore":null},{"path":"color/randomRgb","sig":"* -> { r, g, b }","examples":[],"description":"random rgb","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L127","ignore":null},{"path":"color/randomHex","sig":"* -> String","examples":[],"description":"random hex","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L137","ignore":null},{"path":"color/randomHsl","sig":"* -> { h, s, l }","examples":[],"description":"random hsl","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L143","ignore":null},{"path":"crypto/md5","sig":"string -> string","examples":[],"description":"md5 hash","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/crypto/index.js#L20","ignore":null},{"path":"crypto/sha256","sig":"string -> string","examples":[],"description":"sha256 hash","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/crypto/index.js#L26","ignore":null},{"path":"crypto/sha512","sig":"string -> string","examples":[],"description":"sha512 hash","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/crypto/index.js#L32","ignore":null},{"path":"function/pipeC","sig":"...f -> f","examples":[],"description":"Curried pipe","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/function/index.js#L8","ignore":null},{"path":"function/on","sig":"(b -> b -> c) -> (a -> b) -> a -> a -> c","examples":["const records = [{ age: 9 }, { age: 1 }, { age: 3 }];\n\n// [{ age: 1 }, { age: 3 }, { age: 9 }]\nR.sort(on(R.subtract, R.prop('age'))), records);"],"description":"on","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/function/index.js#L19","ignore":null},{"path":"function/once","sig":"(a -> b) -> (a -> b)","examples":[],"description":"once","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/function/index.js#L25","ignore":null},{"path":"function/noop","sig":"* -> undefined","examples":[],"description":"\"no-op\"","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/function/index.js#L41","ignore":null},{"path":"is/isDate","sig":"* -> boolean","examples":[],"description":"Test for date type","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L45","ignore":null},{"path":"iterable/async/map","sig":"(A -> Promise<B>) -> Iterable<A> -> AsyncIterator<B>","examples":["const iterator = from([1, 2, 3])\n\n// from([2, 4, 6])\nmap(async n => n * 2, iterator)"],"description":"Applies a function to each of an async iterable's yielded items. Works on all iterables","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L34","ignore":null},{"path":"iterable/async/from","sig":"Iterable<t> -> AsyncIterator<t>","examples":["from([1, 2, 3]) // AsyncIterator<1, 2, 3>"],"description":"Returns an async iterator from an iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L44","ignore":null},{"path":"iterable/async/flatMap","sig":"(a -> Iterable<b>) -> Iterable<a> -> AsyncIterator<b>","examples":["const iter = from([1, 2, 3])\n\n// from([1, 2, 2, 4, 3, 6])\nflatMap(async function* (n) {\n  yield await n;\n  yield await n * 2;\n}, iter)"],"description":"Maps a function over an iterable and concatenates the results. a.k.a. \"chain\"","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L84","ignore":null},{"path":"iterable/async/of","sig":"t... -> AsyncIterator<t>","examples":["of(1, 2, 3) // AsyncIterator<1, 2, 3>"],"description":"Create an iterator of one or more (variadic) arguments","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L95","ignore":null},{"path":"iterable/async/reduce","sig":"((a, t) -> Promise<a>) -> a -> Iterable<t> -> Promise<a>","examples":["const iterator = from([1, 2, 3]);\nawait reduce((a, b) => a + b, 0, iterator); // 6"],"description":"reduce","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L111","ignore":null},{"path":"iterable/async/zipWith","sig":"((a, b) -> Promise<c>) -> Iterable<a> -> Iterable<b> -> AsyncIterator<c>","examples":[],"description":"zip with","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L142","ignore":null},{"path":"iterable/async/zip","sig":"Iterable<a> -> Iterable<b> -> AsyncIterator<[a, b]>","examples":[],"description":"\"zips\" two iterables into pairs of items from corresponding indices\nof the input iterables. truncated to shorter of two iterables","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L150","ignore":null},{"path":"iterable/async/rangeStep","sig":"Number -> Number -> Number -> AsyncIterator<Number>","examples":[],"description":"iterates from 0 to n by with a step (exclusive)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L157","ignore":null},{"path":"iterable/async/range","sig":"Number -> Number -> AsyncIterator<Number>","examples":["range(0, 5) // from([0, 1, 2, 3, 4])"],"description":"iterates from 0 to n - 1 (exclusive)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L169","ignore":null},{"path":"iterable/async/enumerate","sig":"Iterable<a> -> AsyncIterator<[Integer, a]>","examples":["const iterator = from(['zero', 'one', 'two'])\nenumerate(iterator) // from([[0, 'zero'], [1, 'one'], [2, 'two']])"],"description":"transform an iterable to an iterable of pairs of indices and their items","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L178","ignore":null},{"path":"iterable/async/slice","sig":"Integer -> Integer -> Iterable<a> -> AsyncIterator<a>","examples":[],"description":"slice","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L194","ignore":null},{"path":"iterable/async/concat","sig":"Iterable<a> -> Iterable<a> -> AsyncIterator<a>","examples":[],"description":"yield all items from one iterator, then the other","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L205","ignore":null},{"path":"iterable/async/forEach","sig":"(a -> Promise<b>) -> Iterable<a> -> AsyncIterator<a>","examples":[],"description":"run a function (side-effect) once for each item","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L222","ignore":null},{"path":"iterable/async/filter","sig":"(a -> Promise<Boolean>) -> Iterable<a> -> AsyncIterator<a>","examples":[],"description":"yield only items that pass the predicate","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L231","ignore":null},{"path":"iterable/async/reject","sig":"(a -> Promise<Boolean>) -> Iterable<a> -> AsyncIterator<a>","examples":[],"description":"yield only items that do not pass the predicate","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L239","ignore":null},{"path":"iterable/async/unnest","sig":"Iterable<Iterable<a>> -> AsyncIterator<a>","examples":[],"description":"flattens one level of a nested iterable of iterables","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L256","ignore":null},{"path":"iterable/async/iterate","sig":"(t -> Promise<t>) -> t -> AsyncIterator<t>","examples":[],"description":"Iterate infinitely, yielding items from seed through a predicate","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L285","ignore":null},{"path":"iterable/async/some","sig":"(a -> Promise<Boolean>) -> Iterable<a> -> Promise<Boolean>","examples":[],"description":"Does any item pass the predicate?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L294","ignore":null},{"path":"iterable/async/none","sig":"(a -> Promise<Boolean>) -> Iterable<a> -> Promise<Boolean>","examples":[],"description":"Do all items fail the predicate?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L303","ignore":null},{"path":"iterable/async/take","sig":"Integer -> Iterable<a> -> AsyncIterator<a>","examples":[],"description":"Yield only the first n items of an iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L333","ignore":null},{"path":"iterable/async/drop","sig":"Integer -> Iterable<a> -> AsyncIterator<a>","examples":[],"description":"Drop the first n items of an iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L342","ignore":null},{"path":"iterable/async/tail","sig":"Iterable<a> -> AsyncIterator<a>","examples":[],"description":"Yield all but the first item","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L348","ignore":null},{"path":"iterable/async/repeat","sig":"a -> Iterator<a>","examples":[],"description":"Infinitely yield an item (a)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L354","ignore":null},{"path":"iterable/async/times","sig":"Integer -> a -> AsyncIterator<a>","examples":[],"description":"Yield an item (a) n times. aka replicate","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L360","ignore":null},{"path":"iterable/async/length","sig":"Iterable<a> -> Promise<Integer>","examples":[],"description":"Get length of iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L366","ignore":null},{"path":"iterable/async/toArray","sig":"Iterable<a> -> Promise<[a]>","examples":[],"description":"Transforms an iterable to an array. exhasts input","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L394","ignore":null},{"path":"iterable/async/every","sig":"(t -> Promise<Boolean>) -> Iterable<t> -> Promise<Boolean>","examples":[],"description":"do all items pass their predicate?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L408","ignore":null},{"path":"iterable/async/group","sig":"Iterable<T> -> AsyncIterator<[T]>","examples":[],"description":"group","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L514","ignore":null},{"path":"iterable/async/cycle","sig":"Iterable<T> -> AsyncIterator<T>","examples":["const iterator = from([1, 2, 3]);\ncycle(iterator) // AsyncIterator<1, 2, 3, 1, 2, 3, ...>"],"description":"yield iterable items cyclically, infinitely looping when exhausted","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L580","ignore":null},{"path":"number/random","sig":"Int -> Int -> Int","examples":[],"description":"inclusive bounds","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/number/index.js#L7","ignore":null},{"path":"object/firstPair","sig":"{ k: v } -> [k, v]","examples":[],"description":"Get an object's first key: value pair","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L15","ignore":null},{"path":"object/firstKey","sig":"{ k: v } -> k","examples":[],"description":"Get an object's first key","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L21","ignore":null},{"path":"object/firstValue","sig":"{ k: v } -> v","examples":[],"description":"Get an object's first value","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L27","ignore":null},{"path":"object/mapPairs","sig":"([a, b] -> [c, d]) -> { a: b } -> { c: d }","examples":[],"description":"Map object key / value pairs","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L43","ignore":null},{"path":"object/mapKeys","sig":"(k -> k) -> { k: v } -> { k: v }","examples":["mapKeys(R.reverse, { one: 1, two: 2 }); // { eno: 1, owt: 2 }"],"description":"Map object keys","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L53","ignore":null},{"path":"object/deepFreeze","sig":"{*} -> {*}","examples":[],"description":"recursive + mutating + identity","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L67","ignore":null},{"path":"object/toHumanJSON","sig":"JSON -> String","examples":[],"description":"Serialize to JSON with newlines and indentation","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L99","ignore":null},{"path":"stream/toString","sig":"Stream -> String","examples":[],"description":"Stream to string","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/stream/index.js#L8","ignore":null},{"path":"stream/fromString","sig":"String -> Stream","examples":[],"description":"String to stream","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/stream/index.js#L23","ignore":null},{"path":"string/capitalize","sig":"String -> String","examples":["capitalize('hello'); // 'Hello'"],"description":"Capitalize the first letter of a string","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/string/index.js#L36","ignore":null},{"path":"string/template","sig":"String -> Object -> String","examples":[],"description":"Reasonably similar to JavaScript template literals","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/string/index.js#L46","ignore":null},{"path":"string/toBase64","sig":"String -> String","examples":[],"description":"Encode a string to base64","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/string/index.js#L65","ignore":null},{"path":"string/parseBase64","sig":"String -> String","examples":[],"description":"Decode a string from base64","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/string/index.js#L71","ignore":null},{"path":"string/slugify","sig":"String -> String","examples":[],"description":"Slugify","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/string/index.js#L77","ignore":null}]}}},"pageContext":{}}