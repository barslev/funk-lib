{"data":{"site":{"siteMetadata":{"version":"0.15.0","jsdocs":[{"path":"array/toObj","sig":"[ k: v ] → { k: v }","examples":["toObj(['a', 'b', 'c']); // { 0: a, 1: b, 2: c }"],"kind":"function","description":"Transform an array into an object, where keys are indices, and values are elements.","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/array/index.js#L18","ignore":false},{"path":"array/toObjBy","sig":"(a → b) → [a] → { b: a }","examples":[],"kind":"function","description":"Given a function that generates a key, turns a list of objects into an object indexing the objects by the given key","deprecated":true,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/array/index.js#L26","ignore":true},{"path":"array/sample","sig":"[a] → a","examples":["sample([0, 1, 2, 3, 4, 5]); // 2"],"kind":"function","description":"Select a random array item","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/array/index.js#L37","ignore":false},{"path":"array/shuffle","sig":"[a] → [a]","examples":["shuffle([1, 2, 3, 4, 5]); // [4, 1, 2, 5, 3]"],"kind":"function","description":"Immutably randomize array element order\nFisher-Yates shuffle","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/array/index.js#L47","ignore":false},{"path":"async/all","sig":"[Promise<a>] → [a]","examples":["// [1, 2, 3]\nawait all([\n  Promise.resolve(1),\n  2,\n  Promise.resolve(3),\n]);"],"kind":"function","description":"Resolve promises in parallel","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L25","ignore":false},{"path":"async/race","sig":"[Promise<a>] → a","examples":["// true\nawait race([\n  delay(1).then(_ => true),\n  delay(10).then(_ => false),\n  delay(100).then(_ => throw Error('oops')),\n]);"],"kind":"function","description":"Returns a promise that resolves or rejects as soon as one of the promises in an\niterable resolves or rejects, with the value or reason from that promise.","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L40","ignore":false},{"path":"async/delay","sig":"Number → Promise<undefined>","examples":["await delay(100); // resolved in 100ms"],"kind":"function","description":"Promise returning setTimeout","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L48","ignore":false},{"path":"async/deferWith","sig":"[a] → (a → b) → Promise<b>","examples":["await deferWith([1, 2], (a, b) => a + b); // 3"],"kind":"function","description":"Defers invoking a function until the current call stack has cleared. Passes args to deferred function.","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L56","ignore":false},{"path":"async/defer","sig":"(a → b) → Promise<b>","examples":["await defer(_ => 3); // 3"],"kind":"function","description":"Defers invoking a function until the current call stack has cleared","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L64","ignore":false},{"path":"async/toAsync","sig":"(a → b) → (a → Promise<b>)","examples":["const pred = n => n > 5;\nconst asyncPred = toAsync(pred);\nasyncPred(2); // Promise<false>"],"kind":"function","description":"Wraps a function to always return a promise","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L75","ignore":false},{"path":"async/fromCallback","sig":null,"examples":["await fromCallback(cb => cb(null, 123)); // 123\nawait fromCallback(cb => cb(Error('oops'))); // Error('oops')"],"kind":"function","description":"Returns a promise that is resolved by an err-back function","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L83","ignore":false},{"path":"async/retryWith","sig":"Number → (a → b) → (a → Promise<b>)","examples":["// retry 10 times with exponential backoff\nconst retry = retryWith(i => {\n  return (i < 10)\n    ? return 50 * Math.pow(2, i)\n    : false;\n});\nconst data = await retry(getData)('https://foo.bar');"],"kind":"function","description":"Wrap a function to retry based on a predicate function","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L105","ignore":false},{"path":"async/promisify","sig":null,"examples":["const callback = (n, cb) => cb(null, n + 1);\nawait promisify(callback)(1); // 2"],"kind":"function","description":"Make an errback-calling function promise-returning. Inverse of callbackify","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L129","ignore":false},{"path":"async/callbackify","sig":null,"examples":["const func = async n => n + 1;\nawait callbackify(func)(1, (err, res) => {\n  // err = null, res = 2\n});"],"kind":"function","description":"Make a promise-returning function errback-yielding. Inverse of promisify","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L142","ignore":false},{"path":"async/deferred","sig":"* → Object","examples":["const { promise, resolve, reject } = deferred();\nresolve(123);\nawait promise; // 123"],"kind":"function","description":"Creates an externally controlled promise","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L158","ignore":false},{"path":"async/reduce","sig":"((a, b) → Promise<a>) → a → [b] → Promise<a>","examples":["// 15\nawait reduce(async (a, n) => a + n, 0, [1, 2, 3, 4, 5]);"],"kind":"function","description":"Async reduce","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L178","ignore":false},{"path":"async/pipe","sig":"(...f) → f","examples":["// 4\nawait pipe(\n  async n => n + 1,\n  async n => n * 2,\n)(1);"],"kind":"function","description":"serial + async R.pipe. works with sync or async functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L194","ignore":false},{"path":"async/pipeC","sig":"(...f) → f","examples":["const math = pipeC(\n  async (a, b) => a + b,\n  c => (c * 2),\n  async c => (c + 1),\n);\nawait math(2)(5) // 21;"],"kind":"function","description":"Curried async pipe","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L210","ignore":false},{"path":"async/mapLimit","sig":"Number → (a → Promise<b>) → [a] → Promise<[b]>","examples":["// [2, 4, 6, 8, 10]\nawait mapLimit(2, async n => (n * 2), [1, 2, 3, 4, 5]);"],"kind":"function","description":"Map with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L220","ignore":false},{"path":"async/forEachLimit","sig":"Number → (a → Promise<b>) → [a] → Promise<[a]>","examples":["// 1\n// 2\n// 3\nawait forEachLimit(2, async n => console.log(n), [1, 2, 3]);"],"kind":"function","description":"For each with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L252","ignore":false},{"path":"async/everyLimit","sig":"Number → (a → Promise<Boolean>) → [a] → Promise<Boolean>","examples":["// false\nawait everyLimit(2, async n => (n > 4), [1, 2, 3, 4, 5]);"],"kind":"function","description":"Every with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L265","ignore":false},{"path":"async/someLimit","sig":"Number → (a → Promise<Boolean>) → [a] → Promise<Boolean>","examples":["// true\nawait someLimit(2, async n => (n > 4), [1, 2, 3, 4, 5]);"],"kind":"function","description":"Some with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L282","ignore":false},{"path":"async/findLimit","sig":"Number → (a → Promise<Boolean>) → [a] → Promise<a>","examples":["const records = [{ id: 1 }, { id: 2 }, { id: 3 }];\n\n// { id: 2 }\nawait findLimit(2, async ({ id }) => (id === 2), records);"],"kind":"function","description":"Find with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L301","ignore":false},{"path":"async/flatMapLimit","sig":"Number → (a → Promise<[b]>) → [a] → Promise<[b]>","examples":["const array = [1, 2, 3];\n\n// [1, 2, 2, 4, 3, 6]\nawait flatMapLimit(2, async n => [n, n * 2], array);"],"kind":"function","description":"Flat map (aka. \"chain\") with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L322","ignore":false},{"path":"async/flatMapPairsLimit","sig":"Number → ([a, b] → Promise<[[c, d]]>) → { a: b } → Promise<{ c: d }>","examples":[],"kind":"function","description":"Flat map pairs with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L330","ignore":false},{"path":"async/mapPairsLimit","sig":"Number → ([a, b] → Promise<[c, d]>) → { a: b } → Promise<{ c: d }>","examples":["// { 1: 'a', 2: 'b', 3: 'c' }\nawait mapPairsLimit(2, async pair => pair.reverse(), { a: 1, b: 2, c: 3 });"],"kind":"function","description":"Map pairs with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L342","ignore":false},{"path":"async/filterLimit","sig":"Number → (a → Promise<Boolean>) → [a] → Promise<[a]>","examples":["const array = [1, 2, 3, 4, 5];\n\n// [1, 2]\nawait filterLimit(2, async n => (n < 3), array);"],"kind":"function","description":"Filter with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L356","ignore":false},{"path":"async/allSettledLimit","sig":"Number → [Promise] → Promise<[{ status, value, reason }]>","examples":[],"kind":"function","description":"All settled with variable parallelization","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L365","ignore":false},{"path":"async/map","sig":"(a → Promise<b>) → [a] → Promise<[b]>","examples":["const array = [1, 2, 3, 4, 5];\n\n// [2, 4, 6, 8, 10]\nawait map(async n => (n * 2), array);"],"kind":"function","description":"Parallel map","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L384","ignore":false},{"path":"async/mapSeries","sig":"(a → Promise<b>) → [a] → Promise<[b]>","examples":["const array = [1, 2, 3, 4, 5];\n\n// [2, 4, 6, 8, 10]\nawait mapSeries(async n => (n * 2), array);"],"kind":"function","description":"Serial map","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L396","ignore":false},{"path":"async/flatMapPairs","sig":"([a, b] → Promise<[[c, d]]>) → { a: b } → Promise<{ c: d }>","examples":[],"kind":"function","description":"Parallel flat map pairs","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L403","ignore":false},{"path":"async/flatMapPairsSeries","sig":"([a, b] → Promise<[[c, d]]>) → { a: b } → Promise<{ c: d }>","examples":[],"kind":"function","description":"Serial flat map pairs","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L410","ignore":false},{"path":"async/mapPairs","sig":"([a, b] → Promise<[c, d]>) → { a: b } → Promise<{ c: d }>","examples":["// { 1: 'a', 2: 'b', 3: 'c' }\nawait mapPairs(async pair => pair.reverse(), { a: 1, b: 2, c: 3 });"],"kind":"function","description":"Parallel map pairs","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L420","ignore":false},{"path":"async/mapPairsSeries","sig":"([a, b] → Promise<[c, d]>) → { a: b } → Promise<{ c: d }>","examples":["// { 1: 'a', 2: 'b', 3: 'c' }\nawait mapPairsSeries(async pair => pair.reverse(), { a: 1, b: 2, c: 3 });"],"kind":"function","description":"Serial map pairs","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L430","ignore":false},{"path":"async/forEach","sig":"(a → Promise<b>) → [a] → Promise<[a]>","examples":["// log 1\n// log 2\n// log 3\n// [1, 2, 3]\nawait forEach(async n => console.log(n), [1, 2, 3]);"],"kind":"function","description":"Parallel for each","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L443","ignore":false},{"path":"async/forEachSeries","sig":"(a → Promise<b>) → [a] → Promise<[a]>","examples":["// log 1\n// log 2\n// log 3\n// [1, 2, 3]\nawait forEachSeries(async n => console.log(n), [1, 2, 3]);"],"kind":"function","description":"Serial for each","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L456","ignore":false},{"path":"async/every","sig":"(a → Promise<Boolean>) → [a] → Promise<Boolean>","examples":["// false\nawait every(async n => (n > 5), [4, 5, 6, 7]);"],"kind":"function","description":"Parallel every","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L466","ignore":false},{"path":"async/everySeries","sig":"(a → Promise<Boolean>) → [a] → Promise<Boolean>","examples":["// false\nawait everySeries(async n => (n > 5), [4, 5, 6, 7]);"],"kind":"function","description":"Serial every","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L476","ignore":false},{"path":"async/some","sig":"(a → Promise<Boolean>) → [a] → Promise<Boolean>","examples":["// true\nawait some(async n => (n > 5), [4, 5, 6, 7]);"],"kind":"function","description":"Parallel some","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L486","ignore":false},{"path":"async/someSeries","sig":"(a → Promise<Boolean>) → [a] → Promise<Boolean>","examples":["// true\nawait someSeries(async n => (n > 5), [4, 5, 6, 7]);"],"kind":"function","description":"Serial some","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L496","ignore":false},{"path":"async/find","sig":"(a → Promise<Boolean>) → [a] → Promise<a>","examples":["const records = [{ id: 1 }, { id: 2 }, { id: 3 }];\n\n// { id: 2 }\nawait find(async ({ id }) => (id === 2), records);"],"kind":"function","description":"Parallel find","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L508","ignore":false},{"path":"async/findSeries","sig":"(a → Promise<Boolean>) → [a] → Promise<a>","examples":["const records = [{ id: 1 }, { id: 2 }, { id: 3 }];\n\n// { id: 2 }\nawait findSeries(async ({ id }) => (id === 2), records);"],"kind":"function","description":"Serial find","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L520","ignore":false},{"path":"async/flatMap","sig":"(a → Promise<[b]>) → [a] → Promise<[b]>","examples":["const array = [1, 2, 3];\n\n// [1, 2, 2, 4, 3, 6]\nawait flatMap(async n => [n, n * 2], array);"],"kind":"function","description":"Parallel flatMap (aka. \"chain\")","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L532","ignore":false},{"path":"async/flatMapSeries","sig":"(a → Promise<[b]>) → [a] → Promise<[b]>","examples":["const array = [1, 2, 3];\n\n// [1, 2, 2, 4, 3, 6]\nawait flatMapSeries(async n => [n, n * 2], array);"],"kind":"function","description":"Serial flatMap (aka. \"chain\")","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L544","ignore":false},{"path":"async/filter","sig":"(a → Promise<Boolean>) → [a] → Promise<[a]>","examples":["const array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n// [0, 1, 2, 3, 4, 5]\nawait filter(async n => (n <= 5), array);"],"kind":"function","description":"Parallel filter","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L555","ignore":false},{"path":"async/filterSeries","sig":"(a → Promise<Boolean>) → [a] → Promise<[a]>","examples":["const array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n// [0, 1, 2, 3, 4, 5]\nawait filterSeries(async n => (n <= 5), array);"],"kind":"function","description":"Serial filter","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L566","ignore":false},{"path":"async/allSettled","sig":"[Promise] → Promise<[{ status, value, reason }]>","examples":[],"kind":"function","description":"Parallel all settled","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L573","ignore":false},{"path":"async/allSettledSeries","sig":"[Promise] → Promise<[{ status, value, reason }]>","examples":[],"kind":"function","description":"Serial all settled","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L580","ignore":false},{"path":"async/props","sig":"{ k: Promise<v> } → Promise<{ k: v }>","examples":["// { one: 1, two: 2, three: 3 }\nawait props({\n  one: Promise.resolve(1),\n  two: 2,\n  three: Promise.resolve(3),\n});"],"kind":"function","description":"Parallel props","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L594","ignore":false},{"path":"async/evolve","sig":"{ k: (a → Promise<b>) } → { k: a } → Promise<{ k: b }>","examples":["const data = { a: 1, b: 2, c: 3 };\n// { a: 2, b: 4, c: 3 }\nawait evolve({\n  a: async a => a + 1,\n  b: async b => b * 2,\n}, data);"],"kind":"function","description":"Async R.evolve","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L608","ignore":false},{"path":"async/timeout","sig":"Number → Promise<a> → Promise<a>","examples":["await timeout(2000, delay(100)); // undefined\nawait timeout(100, delay(2000)); // TimeoutError"],"kind":"function","description":"Timeout a promise","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L618","ignore":false},{"path":"color/rgbToHsl","sig":"{ r, g, b } → { h, s, l }","examples":[],"kind":"function","description":"RGB to HSL","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L14","ignore":false},{"path":"color/hslToRgb","sig":"{ h, s, l } → { r, g, b }","examples":[],"kind":"function","description":"HSL to RGB","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L49","ignore":false},{"path":"color/hexToRgb","sig":"String → { r, g, b }","examples":[],"kind":"function","description":"Hex to RGB","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L84","ignore":false},{"path":"color/rgbToHex","sig":"{ r, g, b } → String","examples":[],"kind":"function","description":"RGB to hex","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L105","ignore":false},{"path":"color/hslToHex","sig":"{ h, s, l } → String","examples":[],"kind":"function","description":"HSL to hex","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L117","ignore":false},{"path":"color/hexToHsl","sig":"String → { h, s, l }","examples":[],"kind":"function","description":"Hex to HSL","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L123","ignore":false},{"path":"color/randomRgb","sig":"* → { r, g, b }","examples":["randomRgb(); // { r: 35, g: 125, b: 106 }"],"kind":"function","description":"Get a random RGB value","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L130","ignore":false},{"path":"color/randomHex","sig":"* → String","examples":["randomHex(); // #b3a95a"],"kind":"function","description":"Get a random hex string","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L141","ignore":false},{"path":"color/randomHsl","sig":"* → { h, s, l }","examples":[],"kind":"function","description":"Get a random HSL value","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L147","ignore":false},{"path":"crypto/hashWith","sig":"String → String → String","examples":["hashWith('md5', 'hello'); // '5d41402abc4b2a76b9719d911017c592'"],"kind":"function","description":"Hash with variable algorithm","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/crypto/index.js#L13","ignore":false},{"path":"crypto/md5","sig":"String → String","examples":["md5('hello'); // '5d41402abc4b2a76b9719d911017c592'"],"kind":"function","description":"md5 hash a string","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/crypto/index.js#L23","ignore":false},{"path":"crypto/sha256","sig":"String → String","examples":["sha256('hello'); // '2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824'"],"kind":"function","description":"sha256 hash a string","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/crypto/index.js#L30","ignore":false},{"path":"crypto/sha512","sig":"String → String","examples":["sha512('hello'); // 'E7C22B994C59D9CF2B48E549B1E24666636045930D3DA7C1ACB299D1C3B7F931F94AAE41EDDA2C2B207A36E10F8BCB8D45223E54878F5B316E7CE3B6BC019629'"],"kind":"function","description":"sha512 hash a string","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/crypto/index.js#L37","ignore":false},{"path":"datetime/now","sig":"a → Date","examples":[],"kind":"function","description":"Get the current unix epoch (in ms)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/datetime/index.js#L5","ignore":false},{"path":"function/pipeC","sig":"...f → f","examples":["const math = pipeC(\n  (a, b) => a + b,\n  c => (c * 2),\n  c => (c + 1),\n);\nawait math(2)(5) // 21;"],"kind":"function","description":"Curried pipe","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/function/index.js#L15","ignore":false},{"path":"function/on","sig":"(b → b → c) → (a → b) → a → a → c","examples":["const records = [{ age: 9 }, { age: 1 }, { age: 3 }];\n\n// [{ age: 1 }, { age: 3 }, { age: 9 }]\nR.sort(on(R.subtract, R.prop('age'))), records);"],"kind":"function","description":"on","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/function/index.js#L26","ignore":false},{"path":"function/once","sig":"(a → b) → (a → b)","examples":["const pred = n => n > 5;\nconst oncePred = once(pred);\noncePred(10); // true\noncePred(1); // true (cached. pred not called again)"],"kind":"function","description":"Creates a function that is restricted to invoking func once.\nRepeat calls to the function return the value of the first invocation","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/function/index.js#L38","ignore":false},{"path":"function/noop","sig":"a → undefined","examples":["noop(); // undefined"],"kind":"function","description":"A function that does nothing. \"no-op\"","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/function/index.js#L55","ignore":false},{"path":"function/throttle","sig":"Number → (a → b) → (a → b)","examples":[],"kind":"function","description":"Throttle a function","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/function/index.js#L61","ignore":false},{"path":"function/debounce","sig":"Number → (a → b) → (a → undefined)","examples":[],"kind":"function","description":"Debounce a function","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/function/index.js#L75","ignore":false},{"path":"http/parseContentType","sig":"String → { mimeType, charset, boundary }","examples":[],"kind":"constant","description":"Parse a content-type HTTP header into its parts","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/http/index.js#L12","ignore":false},{"path":"array","sig":null,"examples":[],"kind":"module","description":"Array functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L1","ignore":false},{"path":"async","sig":null,"examples":[],"kind":"module","description":"Async functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L6","ignore":false},{"path":"color","sig":null,"examples":[],"kind":"module","description":"Color functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L11","ignore":false},{"path":"crypto","sig":null,"examples":[],"kind":"module","description":"Crypto functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L16","ignore":false},{"path":"datetime","sig":null,"examples":[],"kind":"module","description":"Datetime functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L21","ignore":false},{"path":"function","sig":null,"examples":[],"kind":"module","description":"Function functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L26","ignore":false},{"path":"http","sig":null,"examples":[],"kind":"module","description":"HTTP functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L31","ignore":false},{"path":"is","sig":null,"examples":[],"kind":"module","description":"Is functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L36","ignore":false},{"path":"iterable","sig":null,"examples":[],"kind":"module","description":"Iterable functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L41","ignore":false},{"path":"number","sig":null,"examples":[],"kind":"module","description":"Number functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L46","ignore":false},{"path":"object","sig":null,"examples":[],"kind":"module","description":"Object functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L51","ignore":false},{"path":"process","sig":null,"examples":[],"kind":"module","description":"Process functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L56","ignore":false},{"path":"stream","sig":null,"examples":[],"kind":"module","description":"Stream functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L61","ignore":false},{"path":"string","sig":null,"examples":[],"kind":"module","description":"String functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L66","ignore":false},{"path":"url","sig":null,"examples":[],"kind":"module","description":"Url functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L71","ignore":false},{"path":"uuid","sig":null,"examples":[],"kind":"module","description":"UUID functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L76","ignore":false},{"path":"is/isFinite","sig":"a → Boolean","examples":["isFinite(10); // true\nisFinite(Infinity); // false"],"kind":"function","description":"Is finite?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L18","ignore":false},{"path":"is/isInteger","sig":"a → Boolean","examples":["isInteger(1); // true\nisInteger(1.23); // false"],"kind":"function","description":"Is integer?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L27","ignore":false},{"path":"is/isNaN","sig":"a → Boolean","examples":["isNaN(NaN); // true"],"kind":"function","description":"Is NaN?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L34","ignore":false},{"path":"is/isArray","sig":"a → Boolean","examples":["isArray([]); // true"],"kind":"function","description":"Is Array?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L43","ignore":false},{"path":"is/isBuffer","sig":"a → Boolean","examples":["isBuffer(Buffer.from([])); // true"],"kind":"function","description":"Is Buffer?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L53","ignore":false},{"path":"is/is","sig":"a → b → Boolean","examples":["const sym = Symbol();\nis(sym, sym); // true\nis(1, true); // false"],"kind":"function","description":"Is equal (strict reference equality)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L64","ignore":false},{"path":"is/isNot","sig":"a → b → Boolean","examples":["const sym = Symbol();\nisNot(1, true); // true\nisNot(sym, sym); // false"],"kind":"function","description":"Is not equal (strict reference equality)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L74","ignore":false},{"path":"is/isInstanceOf","sig":"String → a → Boolean","examples":["isInstanceOf(Array, []); // true"],"kind":"function","description":"Is instance of class?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L81","ignore":false},{"path":"is/isTypeOf","sig":"String → a → Boolean","examples":["isTypeOf('boolean', true); // true"],"kind":"function","description":"Is type of?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L88","ignore":false},{"path":"is/isBoolean","sig":"a → Boolean","examples":["isBoolean(false); // true"],"kind":"function","description":"Is Boolean?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L95","ignore":false},{"path":"is/isDate","sig":"a → Boolean","examples":["isDate(new Date()); // true"],"kind":"function","description":"Is Date?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L102","ignore":false},{"path":"is/isRegExp","sig":"a → Boolean","examples":["isRegExp(/[a-z]/); // true"],"kind":"function","description":"Is regular expression?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L109","ignore":false},{"path":"is/isFunction","sig":"a → Boolean","examples":["isFunction(() => {}); // true"],"kind":"function","description":"Is function?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L116","ignore":false},{"path":"is/isNull","sig":"a → Boolean","examples":["isNull(null); // true"],"kind":"function","description":"Is null?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L123","ignore":false},{"path":"is/isString","sig":"a → Boolean","examples":["isString('hello'); // true"],"kind":"function","description":"Is string?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L130","ignore":false},{"path":"is/isSymbol","sig":"a → Boolean","examples":["isSymbol(Symbol('foo')); // true"],"kind":"function","description":"Is symbol?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L137","ignore":false},{"path":"is/isUndefined","sig":"a → Boolean","examples":["isUndefined(undefined); // true"],"kind":"function","description":"Is undefined?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L144","ignore":false},{"path":"is/isNumber","sig":"a → Boolean","examples":["isNumber(10); // true\nisNumber(NaN); // false"],"kind":"function","description":"Is number?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L153","ignore":false},{"path":"is/isNegative","sig":"a → Boolean","examples":["isNumber(-10); // true\nisNumber(10); // false"],"kind":"function","description":"Is negative?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L162","ignore":false},{"path":"is/isPositive","sig":"a → Boolean","examples":["isNumber(10); // true\nisNumber(-10); // false"],"kind":"function","description":"Is positive?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L171","ignore":false},{"path":"is/isFloat","sig":"a → Boolean","examples":["isFloat(1.23); // true\nisFloat(1); // false"],"kind":"function","description":"Is float?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L180","ignore":false},{"path":"is/isTruthy","sig":"a → Boolean","examples":["isTruthy(1); // true"],"kind":"function","description":"Is truthy?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L187","ignore":false},{"path":"is/isFalsey","sig":"a → Boolean","examples":["isFalsey(0); // true"],"kind":"function","description":"Is false?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L194","ignore":false},{"path":"is/isObject","sig":"a → Boolean","examples":["isObject({}); // true\nisObject([]]); // false\nisObject(null); // false"],"kind":"function","description":"Is object?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L204","ignore":false},{"path":"is/isPromise","sig":"a → Boolean","examples":["isPromise(Promise.resolve(1)); // true"],"kind":"function","description":"Is promise?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L215","ignore":false},{"path":"is/isStream","sig":"a → Boolean","examples":["isStream(new Stream.Readable()); // true"],"kind":"function","description":"Is stream?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L227","ignore":false},{"path":"is/isPojo","sig":"a → Boolean","examples":["isPojo({}); // true"],"kind":"function","description":"Is \"plain old javascript object\"?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L237","ignore":false},{"path":"is/isIterator","sig":"a → Boolean","examples":["const iterator = [][Symbol.iterator]();\nisIterator(iterator); // true"],"kind":"function","description":"Is iterator?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L249","ignore":false},{"path":"is/isIterable","sig":"a → Boolean","examples":["isIterable([]); // true"],"kind":"function","description":"Is iterable?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L260","ignore":false},{"path":"is/isAsyncIterable","sig":"a → Boolean","examples":["const iterator = (async function* () {})();\nisAsyncIterable(iterator); // true"],"kind":"function","description":"Is async iterable?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L272","ignore":false},{"path":"iterable/async/map","sig":"(a → Promise<b>) → Iterable<a> → AsyncIterator<b>","examples":["// AsyncIterator<2, 4, 6>\nmap(async n => n * 2, from([1, 2, 3]));"],"kind":"function","description":"Applies a function to each of an async iterable's yielded items. Works on all iterables","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L32","ignore":false},{"path":"iterable/async/from","sig":"Iterable<a> → AsyncIterator<a>","examples":["from([1, 2, 3]); // AsyncIterator<1, 2, 3>"],"kind":"function","description":"Returns an async iterator from an iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L42","ignore":false},{"path":"iterable/async/nextOr","sig":"a → Iterable<a> → Promise<a>","examples":["await nextOr(10, from([1, 2, 3])); // 1\nawait nextOr(10, from([])); // 10"],"kind":"function","description":"Return the first or \"next\" item with a default value if iterable is empty","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L53","ignore":false},{"path":"iterable/async/next","sig":"Iterable<a> → Promise<a>","examples":["await next(from([1, 2, 3])); // 1\nawait next(from([])); // StopIterationError()"],"kind":"function","description":"Returns the first or \"next\" item. aka head","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L67","ignore":false},{"path":"iterable/async/last","sig":"Iterable<a> → Promise<a>","examples":["await last(from(1, 2, 3)); // 3"],"kind":"function","description":"Returns the last item","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L80","ignore":false},{"path":"iterable/async/flatMap","sig":"(a → Iterable<b>) → Iterable<a> → AsyncIterator<b>","examples":["const iterator = from([1, 2, 3]);\n\n// AsyncIterator<1, 2, 2, 4, 3, 6>\nflatMap(async function* (n) {\n  yield await n;\n  yield await n * 2;\n}, iterator);"],"kind":"function","description":"Maps a function over an iterable and concatenates the results. a.k.a. \"chain\"","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L99","ignore":false},{"path":"iterable/async/of","sig":"...a → AsyncIterator<a>","examples":["of(1, 2, 3); // AsyncIterator<1, 2, 3>"],"kind":"function","description":"Create an iterator of one or more (variadic) arguments","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L109","ignore":false},{"path":"iterable/async/scan","sig":"((a, b) → Promise<a>) → a → Iterable<b> → AsyncIterator<a>","examples":["// AsyncIterator<1, 1, 2, 6, 24>\nscan(R.multiply, 1, from([1, 2, 3, 4]));"],"kind":"function","description":"Scan","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L118","ignore":false},{"path":"iterable/async/reduce","sig":"((a, b) → Promise<a>) → a → Iterable<b> → Promise<a>","examples":["// 6\nawait reduce(async (a, b) => a + b, 0, from([1, 2, 3]));"],"kind":"function","description":"Reduce","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L131","ignore":false},{"path":"iterable/async/zipAllWith","sig":"((...a) → Promise<b>) → [Iterable<a>] → AsyncIterator<b>","examples":["// AsyncIterator<[7, 4, 1], [8, 5, 2], [9, 6, 3]>\nzipAllWith(async (a, b, c) => [c, b, a], [\n  from([1, 2, 3]),\n  from([4, 5, 6]),\n  from([7, 8, 9]),\n]);"],"kind":"function","description":"Zip multiple iterators with custom zipping function","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L144","ignore":false},{"path":"iterable/async/zipAll","sig":"[Iterable<a>, Iterable<b>, Iterable<c>] → AsyncIterator<[a, b, c]>","examples":["// AsyncIterator<[1, 4, 7], [2, 5, 8], [3, 6, 9]>\nzipAll([\n  from([1, 2, 3]),\n  from([4, 5, 6]),\n  from([7, 8, 9]),\n]);"],"kind":"function","description":"Zip an array of iterables into an iterables of arrays of items from corresponding indices\nof the input iterables","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L173","ignore":false},{"path":"iterable/async/zipWithN","sig":"","examples":["// AsyncIterator<[4, 1], [5, 2], [6, 3]>\nzipWithN(2)(async (a, b) => [b, a])(\n  from([1, 2, 3]),\n  from([4, 5, 6]),\n);"],"kind":"function","description":"Zip with N","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L186","ignore":false},{"path":"iterable/async/zipWith","sig":"((a, b) → Promise<c>) → Iterable<a> → Iterable<b> → AsyncIterator<c>","examples":["// AsyncIterator<[4, 1], [5, 2], [6, 3]>\nzipWith(async (a, b) => [b, a])(from([1, 2, 3]), from([4, 5, 6]));"],"kind":"function","description":"Zip two iterables with a custom zipping function","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L195","ignore":false},{"path":"iterable/async/zip","sig":"Iterable<a> → Iterable<b> → AsyncIterator<[a, b]>","examples":["// AsyncIterator<[1, 4], [2, 5], [3, 6]>\nzip(from([1, 2, 3]), from([4, 5, 6]));"],"kind":"function","description":"Zips two iterables into pairs of items from corresponding indices\nof the input iterables. truncated to shorter of two iterables","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L205","ignore":false},{"path":"iterable/async/rangeStep","sig":"Number → Number → Number → AsyncIterator<Number>","examples":["// AsyncIterator<0, 15, 30, 45, 60, 75, 90>\nrangeStep(15, 0, 100);"],"kind":"function","description":"Iterates from 0 to n by with a step (exclusive)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L215","ignore":false},{"path":"iterable/async/range","sig":"Number → Number → AsyncIterator<Number>","examples":["range(0, 5); // AsyncIterator<0, 1, 2, 3, 4>"],"kind":"function","description":"Iterates from 0 to n - 1 (exclusive)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L227","ignore":false},{"path":"iterable/async/enumerate","sig":"Iterable<a> → AsyncIterator<[Integer, a]>","examples":["// AsyncIterator<[0, 'zero'], [1, 'one'], [2, 'two']>\nenumerate(from(['zero', 'one', 'two']));"],"kind":"function","description":"Transform an iterable to an iterable of pairs of indices and their items","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L236","ignore":false},{"path":"iterable/async/slice","sig":"Integer → Integer → Iterable<a> → AsyncIterator<a>","examples":["// AsyncIterator<3, 4, 5>\nslice(2, 5, from([1, 2, 3, 4, 5, 6, 7, 8]));"],"kind":"function","description":"Slice an async iterator between two indices","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L255","ignore":false},{"path":"iterable/async/concat","sig":"Iterable<a> → Iterable<a> → AsyncIterator<a>","examples":["// AsyncIterator<1, 2, 3, 4, 5, 6>\nconcat(from([1, 2, 3]), from([4, 5, 6]));"],"kind":"function","description":"Yield all items from one iterator, then the other","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L269","ignore":false},{"path":"iterable/async/prepend","sig":"a → Iterable<a> → AsyncIterator<a>","examples":["// AsyncIterator<0, 1, 2, 3>\nprepend(0, from([1, 2, 3]));"],"kind":"function","description":"Prepend an item `a` to the end of an iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L281","ignore":false},{"path":"iterable/async/append","sig":"a → Iterable<a> → AsyncIterator<a>","examples":["append(4, from([1, 2, 3])); // AsyncIterator<1, 2, 3, 4>"],"kind":"function","description":"Append an item `a` to the start of an iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L288","ignore":false},{"path":"iterable/async/forEach","sig":"(a → Promise<b>) → Iterable<a> → AsyncIterator<a>","examples":[],"kind":"function","description":"Run a function (side-effect) once for each item","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L294","ignore":false},{"path":"iterable/async/filter","sig":"(a → Promise<Boolean>) → Iterable<a> → AsyncIterator<a>","examples":["// AsyncIterator<1, 2, 3, 4>\nfilter(async n => (n < 5), from([1, 2, 3, 4, 5, 6, 7, 8]));"],"kind":"function","description":"Yield only items that pass the predicate","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L306","ignore":false},{"path":"iterable/async/reject","sig":"(a → Promise<Boolean>) → Iterable<a> → AsyncIterator<a>","examples":["// AsyncIterator<6, 7, 8>\nreject(async n => (n < 5), from(1, 2, 3, 4, 5, 6, 7, 8));"],"kind":"function","description":"Yield only items that do not pass the predicate","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L317","ignore":false},{"path":"iterable/async/flattenN","sig":"Number → Iterable<Iterable<a>> → AsyncIterator<a>","examples":["// AsyncIterator<1, 2, 3, [4]>\nflattenN(2, from([1, [2, [3, [4]]]]))"],"kind":"function","description":"Flattens n-levels of a nested iterable of iterables","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L326","ignore":false},{"path":"iterable/async/unnest","sig":"Iterable<Iterable<a>> → AsyncIterator<a>","examples":["// AsyncIterator<1, 2, [3, [4]]>\nunnest(from([1, [2, [3, [4]]]]));"],"kind":"function","description":"Flattens one level of a nested iterable of iterables","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L341","ignore":false},{"path":"iterable/async/flatten","sig":"Iterable<Iterable<a>> → AsyncIterator<a>","examples":["// AsyncIterator<1, 2, 3, 4>\nunnest(from([1, [2, [3, [4]]]]));"],"kind":"function","description":"Flattens a nested iterable of iterables into a single iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L350","ignore":false},{"path":"iterable/async/unfold","sig":"(a → Promise<[a, a]>) → a → AsyncIterator<a>","examples":["// AsyncIterator<1, 2, 4, 8>\nunfold(async n => (n < 10 ? [n, n * 2] : false), 1);"],"kind":"function","description":"Unfold","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L361","ignore":false},{"path":"iterable/async/flatIterate","sig":"(a → Iterable<a>) → a → AsyncIterator<a>","examples":["// AsyncIterator<0, 0, 1, 2, 2, 4, 3, 6, 4, 8, ...>\nflatIterate(async function* (n) {\n  yield await n;\n  yield await (n * 2);\n  return n + 1;\n}, 0));"],"kind":"function","description":"Flat iterate","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L383","ignore":false},{"path":"iterable/async/iterate","sig":"(a → Promise<a>) → a → AsyncIterator<a>","examples":["// AsyncIterator<0, 2, 4, 6, 8, 10, ...>\niterate(async n => n + 2, 0);"],"kind":"function","description":"Iterate infinitely, yielding items from seed through a predicate","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L395","ignore":false},{"path":"iterable/async/some","sig":"(a → Promise<Boolean>) → Iterable<a> → Promise<Boolean>","examples":["// true\nawait some(async n => (n > 5), from([1, 2, 3, 4, 5, 6]));"],"kind":"function","description":"Does any item pass the predicate?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L408","ignore":false},{"path":"iterable/async/none","sig":"(a → Promise<Boolean>) → Iterable<a> → Promise<Boolean>","examples":["// true\nawait none(async n => (n > 5), from([1, 2, 3, 4, 5]));"],"kind":"function","description":"Do all items fail the predicate?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L422","ignore":false},{"path":"iterable/async/uniqueWith","sig":"((a, a) → Promise<Boolean>) → Iterable<a> → AsyncIterator<a>","examples":["const records = from([{ id: 1 }, { id: 2 }, { id: 1 }]);\n// AsyncIterator<{ id: 1 }, { id: 2 }>\nuniqueWith(async (a, b) => (a.id === b.id), records);"],"kind":"function","description":"Yield only items that are unique by the predicate","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L433","ignore":false},{"path":"iterable/async/unique","sig":"Iterable<a> → AsyncIterator<a>","examples":["// AsyncIterator<1, 2, 3, 4>\nunique(from([1, 1, 2, 3, 4, 4, 4]));"],"kind":"function","description":"Yield only the unique items in an iterable (by strict equality)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L451","ignore":false},{"path":"iterable/async/take","sig":"Integer → Iterable<a> → AsyncIterator<a>","examples":["// AsyncIterator<1, 2, 3>\ntake(3, from(1, 2, 3, 4, 5));"],"kind":"function","description":"Yield only the first n items of an iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L467","ignore":false},{"path":"iterable/async/drop","sig":"Integer → Iterable<a> → AsyncIterator<a>","examples":["// AsyncIterator<4, 5>\ndrop(3, from(1, 2, 3, 4, 5));"],"kind":"function","description":"Drop the first n items of an iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L479","ignore":false},{"path":"iterable/async/tail","sig":"Iterable<a> → AsyncIterator<a>","examples":["// AsyncIterator<2, 3, 4, 5>\ntail(from(1, 2, 3, 4, 5));"],"kind":"function","description":"Yield all but the first item","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L488","ignore":false},{"path":"iterable/async/repeat","sig":"a → AsyncIterator<a>","examples":["// AsyncIterator<'hi', 'hi', 'hi', ...>\nrepeat('hi');"],"kind":"function","description":"Infinitely yield an item (a)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L497","ignore":false},{"path":"iterable/async/times","sig":"Integer → a → AsyncIterator<a>","examples":["// AsyncIterator<'hi', 'hi', 'hi', 'hi'>\ntimes(4, 'hi');"],"kind":"function","description":"Yield an item (a) n times. aka replicate","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L506","ignore":false},{"path":"iterable/async/length","sig":"Iterable<a> → Promise<Integer>","examples":["// 5\nawait length(from([1, 2, 3, 4, 5]));"],"kind":"function","description":"Get length of iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L516","ignore":false},{"path":"iterable/async/count","sig":"(a → Promise<Boolean>) → Iterable<a> → Promise<Integer>","examples":["// 4\nawait count(async n => (n > 3), from([1, 2, 3, 4, 5, 6, 7]));"],"kind":"function","description":"Return the number of items in an iterable. exhasts input","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L527","ignore":false},{"path":"iterable/async/sumBy","sig":"(a → Promise<Number>) → Iterable<a> → Promise<Number>","examples":[],"kind":"function","description":"Sum by","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L533","ignore":false},{"path":"iterable/async/minBy","sig":"(a → Promise<Number>) → Iterable<a> → Promise<Number>","examples":[],"kind":"function","description":"Min by","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L539","ignore":false},{"path":"iterable/async/maxBy","sig":"(a → Promise<Number>) → Iterable<a> → Promise<Number>","examples":[],"kind":"function","description":"Max by","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L545","ignore":false},{"path":"iterable/async/sum","sig":"Iterable<Number> → Promise<Number>","examples":["await sum(from([1, 2, 3])); // 6"],"kind":"function","description":"Sum","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L552","ignore":false},{"path":"iterable/async/min","sig":"Iterable<Number> → Promise<Number>","examples":["await min(from([1, 2, 3])); // 1"],"kind":"function","description":"Min","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L559","ignore":false},{"path":"iterable/async/max","sig":"Iterable<Number> → Promise<Number>","examples":["await max(from([1, 2, 3])); // 3"],"kind":"function","description":"Max","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L566","ignore":false},{"path":"iterable/async/toArray","sig":"Iterable<a> → Promise<[a]>","examples":["await toArray(from([1, 2, 3])); // [1, 2, 3]"],"kind":"function","description":"Transforms an async iterable to an array. exhasts input","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L573","ignore":false},{"path":"iterable/async/nth","sig":"Integer → Iterable<a> → Promise<a|undefined>\n// 'b'\nawait nth(1, from(['a', 'b', 'c', 'd']));","examples":[],"kind":"function","description":"Returns the element at the nth index","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L581","ignore":false},{"path":"iterable/async/every","sig":"(a → Promise<Boolean>) → Iterable<a> → Promise<Boolean>","examples":["// false\nawait every(async n => (n < 4), from([1, 2, 3, 4]));"],"kind":"function","description":"Do all items pass their predicate?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L595","ignore":false},{"path":"iterable/async/find","sig":"(a → Promise<Boolean>) → Iterable<a> → Promise<a|undefined>","examples":["const records = [{ id: 1 }, { id: 2 }, { id: 3 }];\n// { id: 2 }\nawait find(async record => (record.id === 2), records);"],"kind":"function","description":"Find","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L609","ignore":false},{"path":"iterable/async/findIndex","sig":"(a → Promise<Boolean>) → Iterable<a> → Promise<Integer>","examples":["const records = [{ id: 1 }, { id: 2 }, { id: 3 }];\n// 1\nawait find(async record => (record.id === 2), records);"],"kind":"function","description":"Find index","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L622","ignore":false},{"path":"iterable/async/exhaust","sig":"Iterable<a> → Promise<undefined>","examples":["const iterator = from([1, 2, 3]);\nawait exhaust(iterator);\nawait toArray(iterator); // []"],"kind":"function","description":"Yield all items","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L639","ignore":false},{"path":"iterable/async/takeWhile","sig":"(a → Promise<Boolean>) → Iterable<a> → AsyncIterator<a>","examples":[],"kind":"function","description":"Take while","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L647","ignore":false},{"path":"iterable/async/dropWhile","sig":"(a → Promise<Boolean>) → Iterable<a> → AsyncIterator<a>","examples":[],"kind":"function","description":"Drop while","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L658","ignore":false},{"path":"iterable/async/reverse","sig":"Iterable<a> → AsyncIterator<a>","examples":["reverse(from([1, 2, 3])); // AsyncIterator<3, 2, 1>"],"kind":"function","description":"Reverse","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L671","ignore":false},{"path":"iterable/async/sort","sig":"((a, a) → Promise<Number>) → Iterable<a> → AsyncIterator<a>","examples":[],"kind":"function","description":"Sort","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L679","ignore":false},{"path":"iterable/async/frame","sig":"Integer → Iterable<a> → AsyncIterator<[a]>","examples":["// AsyncIterator<[0, 1, 2], [1, 2, 3], [2, 3, 4], [4, 5, 6]>\nframe(3, from([0, 1, 2, 3, 4, 5, 6]));"],"kind":"function","description":"Yield a sliding \"window\" of length n. note: caches n items","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L688","ignore":false},{"path":"iterable/async/dropLast","sig":"Number → Iterable<a> → AsyncIterator<a>","examples":["// AsyncIterator<1, 2, 3>\ndropLast(2, from([1, 2, 3, 4, 5]));"],"kind":"function","description":"Yield all but the last n items. note: caches n + 1 items","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L708","ignore":false},{"path":"iterable/async/init","sig":"Iterable<a> → AsyncIterator<a>","examples":["// AsyncIterator<1, 2, 3, 4>\ninit(from([1, 2, 3, 4, 5]));"],"kind":"function","description":"Yield all but the last 1 item","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L724","ignore":false},{"path":"iterable/async/group","sig":"Iterable<a> → AsyncIterator<[a]>","examples":[],"kind":"function","description":"Group","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L751","ignore":false},{"path":"iterable/async/tee","sig":"Integer → Iterable<a> → [AsyncIterator<a>]","examples":["// [AsyncIterator<1, 2, 3>, AsyncIterator<1, 2, 3>, AsyncIterator<1, 2, 3>]\ntee(3, from([1, 2, 3]));"],"kind":"function","description":"Copy an iterator n times (exhausts its input)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L761","ignore":false},{"path":"iterable/async/splitEvery","sig":"Integer → Iterable<a> → AsyncIterator<[a]>","examples":["// AsyncIterator<[0, 1, 2], [3, 4, 5], [6, 7, 8]>\nsplitEvery(3, from([0, 1, 2, 3, 4, 5, 6, 7, 8]));"],"kind":"function","description":"Yield groups of length n","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L787","ignore":false},{"path":"iterable/async/splitAt","sig":"Integer → Iterable<a> → [AsyncIterator<a>, AsyncIterator<a>]","examples":["// [AsyncIterator<0, 1, 2, 3, 4>, AsyncIterator<5, 6>]\nsplitAt(4, from([0, 1, 2, 3, 4, 5, 6]));"],"kind":"function","description":"Split an async iterable into a pair of iterables at a particular index","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L805","ignore":false},{"path":"iterable/async/partition","sig":"(a → Promise<Boolean>) → Iterable<a> → [AsyncIterator<a>, AsyncIterator<a>]","examples":["// [AsyncIterator<0, 1, 2>, AsyncIterator<3, 4, 5, 6>]\npartition(async n => n < 3, from([0, 1, 2, 3, 4, 5, 6]));"],"kind":"function","description":"Split an aynsc iterable into a pair of iterables based on the truthiness of their predicate","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L817","ignore":false},{"path":"iterable/async/cycleN","sig":"Integer → Iterable<a> → AsyncIterator<a>","examples":["// AsyncIterator<1, 2, 1, 2, 1, 2>\ncycleN(3, from([1, 2]));"],"kind":"function","description":"Yield all items from an iterator, n times","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L829","ignore":false},{"path":"iterable/async/cycle","sig":"Iterable<a> → AsyncIterator<a>","examples":["// AsyncIterator<1, 2, 3, 1, 2, 3, ...>\ncycle(from([1, 2, 3]));"],"kind":"function","description":"Yield iterable items cyclically, infinitely looping when exhausted","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L843","ignore":false},{"path":"iterable/async/unzipN","sig":"Number → Iterable<[A, B, ...Z]> → [AsyncIterator<A>, AsyncIterator<B>, ...AsyncIterator<Z>]","examples":["// [AsyncIterator<1, 4, 7>, AsyncIterator<2, 5, 8>, AsyncIterator<3, 6, 9>]\nunzipN(3, from([[1, 2, 3], [4, 5, 6], [7, 8, 9]]));"],"kind":"function","description":"Transforms an iterable of n-tuple into an n-tuple of iterables","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L853","ignore":false},{"path":"iterable/async/unzip","sig":"Iterable<[A, B]> → [AsyncIterator<A>, AsyncIterator<B>]","examples":["// [AsyncIterator<1, 3, 5>, AsyncIterator<2, 4, 6>]\nunzip(from([[1, 2], [3, 4], [5, 6]]));"],"kind":"function","description":"Transforms an iterable of pairs into a pairs of iterables","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L862","ignore":false},{"path":"iterable/async/intersperse","sig":"a → Iterable<a> → AsyncIterator<a>","examples":["// AsyncIterator<'a', '-', 'b', '-', 'c'>\nintersperse('-', from('a', 'b', 'c'));"],"kind":"function","description":"Insert an item `a` between every item in the iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L871","ignore":false},{"path":"iterable/async/joinWith","sig":"String → Iterable<a> → Promise<String>","examples":["// 'some-slug-parts';\nawait joinWith('-', from(['some', 'slug', 'parts']));"],"kind":"function","description":"Serialize iterator items to a string with an arbitrary spacer","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L885","ignore":false},{"path":"iterable/async/join","sig":"Iterable<a> → Promise<String>","examples":["// 'abcde'\nawait join(from(['a', 'b', 'c', 'd', 'e']));"],"kind":"function","description":"Serialize iterator items to a string","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L897","ignore":false},{"path":"iterable/async/isEmpty","sig":"Iterable<a> → Promise<Boolean>","examples":["await isEmpty(from([])); // true\nawait isEmpty(from([1])); // false"],"kind":"function","description":"Is an iterable empty? (done or length = 0)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L906","ignore":false},{"path":"iterable/async/indices","sig":"Iterable<a> → AsyncIterator<Integer>","examples":["// AsyncIterator<0, 1, 2>\nindices(from(['a', 'b', 'c']));"],"kind":"function","description":"Get an iterator of indices (0 to length - 1)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L931","ignore":false},{"path":"iterable/async/padTo","sig":"Integer → a → Iterable<a> → AsyncIterator<a>","examples":["// AsyncIterator<'a', 'b', 'c', 'd', 'd', 'd'>\npadTo(6, 'd', from(['a', 'b', 'c']));"],"kind":"function","description":"Pad an iterable with with a finite number of items `a`","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L940","ignore":false},{"path":"iterable/async/pad","sig":"a → Iterable<a> → AsyncIterator<a>","examples":["// AsyncIterator<'a', 'b', 'c', 'd', 'd', 'd', ...>\npad('d', from(['a', 'b', 'c']));"],"kind":"function","description":"Pad iterable with an infinite number of items `a`","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L953","ignore":false},{"path":"iterable/async","sig":null,"examples":[],"kind":"module","description":"Async iterable functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/index.js#L1","ignore":false},{"path":"iterable/sync","sig":null,"examples":[],"kind":"module","description":"Sync iterable functions","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/index.js#L6","ignore":false},{"path":"iterable/sync/map","sig":"(a → b) → Iterable<a> → Iterator<b>","examples":["// Iterator<2, 4, 6>\nmap(n => n * 2, from([1, 2, 3]));"],"kind":"function","description":"Applies a function to each of an iterable's yielded items","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L24","ignore":false},{"path":"iterable/sync/from","sig":"Iterable<a> → Iterator<a>","examples":["from([1, 2, 3]); // Iterator<1, 2, 3>"],"kind":"function","description":"Returns an iterator from an iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L34","ignore":false},{"path":"iterable/sync/nextOr","sig":"a → Iterable<a> → a","examples":["nextOr(10, from([1, 2, 3])); // 1\nnextOr(10, from([])); // 10"],"kind":"function","description":"Return the first or \"next\" item with a default value if iterable is empty","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L43","ignore":false},{"path":"iterable/sync/next","sig":"Iterable<a> → a","examples":["next(from([1, 2, 3])); // 1\nnext(from([])); // StopIterationError()"],"kind":"function","description":"Returns the first or \"next\" item. aka head","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L56","ignore":false},{"path":"iterable/sync/last","sig":"Iterable<a> → a","examples":["last(from(1, 2, 3)); // 3"],"kind":"function","description":"Returns the last item","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L69","ignore":false},{"path":"iterable/sync/flatMap","sig":"(a → Iterable<b>) → Iterable<a> → Iterator<b>","examples":["const iterator = from([1, 2, 3]);\n\n// Iterator<1, 2, 2, 4, 3, 6>\nflatMap(function* (n) {\n  yield n;\n  yield n * 2;\n}, iterator);"],"kind":"function","description":"Maps a function over an iterable and concatenates the results. a.k.a. \"chain\"","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L87","ignore":false},{"path":"iterable/sync/of","sig":"...a → Iterator<a>","examples":["of(1, 2, 3); // Iterator<1, 2, 3>"],"kind":"function","description":"Create an iterator of one or more (variadic) arguments","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L97","ignore":false},{"path":"iterable/sync/scan","sig":"((a, b) → a) → a → Iterable<b> → Iterator<a>","examples":["// Iterator<1, 1, 2, 6, 24>\nscan(R.multiply, 1, from([1, 2, 3, 4]));"],"kind":"function","description":"Scan","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L106","ignore":false},{"path":"iterable/sync/reduce","sig":"((a, b) → a) → a → Iterable<b> → a","examples":["// 6\nreduce((a, b) => a + b, 0, from([1, 2, 3]));"],"kind":"function","description":"Reduce","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L118","ignore":false},{"path":"iterable/sync/zip","sig":"Iterable<a> → Iterable<b> → Iterator<[a, b]>","examples":["// Iterator<[1, 4], [2, 5], [3, 6]>\nzip(from([1, 2, 3]), from([4, 5, 6]));"],"kind":"function","description":"Zips two iterables into pairs of items from corresponding indices\nof the input iterables. truncated to shorter of two iterables","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L155","ignore":false},{"path":"iterable/sync/rangeStep","sig":"Number → Number → Number → Iterator<Number>","examples":["// Iterator<0, 15, 30, 45, 60, 75, 90>\nrangeStep(15, 0, 100);"],"kind":"function","description":"Iterates from 0 to n by with a step (exclusive)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L164","ignore":false},{"path":"iterable/sync/range","sig":"Number → Number → Iterator<Number>","examples":["range(0, 5); // Iterator<0, 1, 2, 3, 4>"],"kind":"function","description":"Iterates from 0 to n - 1 (exclusive)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L176","ignore":false},{"path":"iterable/sync/enumerate","sig":"Iterable<a> → Iterator<[Integer, a]>","examples":["// Iterator<[0, 'zero'], [1, 'one'], [2, 'two']>\nenumerate(from(['zero', 'one', 'two']));"],"kind":"function","description":"Transform an iterable to an iterable of pairs of indices and their items","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L185","ignore":false},{"path":"iterable/sync/slice","sig":"Integer → Integer → Iterable<a> → Iterator<a>","examples":["// Iterator<3, 4, 5>\nslice(2, 5, from([1, 2, 3, 4, 5, 6, 7, 8]));"],"kind":"function","description":"Slice an iterator between two indices","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L204","ignore":false},{"path":"iterable/sync/concat","sig":"Iterable<a> → Iterable<a> → Iterator<a>","examples":["// Iterator<1, 2, 3, 4, 5, 6>\nconcat(from([1, 2, 3]), from([4, 5, 6]));"],"kind":"function","description":"Yield all items from one iterator, then the other","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L218","ignore":false},{"path":"iterable/sync/prepend","sig":"a → Iterable<a> → Iterator<a>","examples":["// Iterator<0, 1, 2, 3>\nprepend(0, from([1, 2, 3]));"],"kind":"function","description":"Prepend an item `a` to the end of an iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L230","ignore":false},{"path":"iterable/sync/append","sig":"a → Iterable<a> → Iterator<a>\n// Iterator<1, 2, 3, 4>","examples":["append(4, from([1, 2, 3]));"],"kind":"function","description":"Append an item `a` to the start of an iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L238","ignore":false},{"path":"iterable/sync/forEach","sig":"(a → b) → Iterable<a> → Iterator<a>","examples":[],"kind":"function","description":"Run a function (side-effect) once for each item","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L244","ignore":false},{"path":"iterable/sync/filter","sig":"(a → Boolean) → Iterable<a> → Iterator<a>","examples":["// Iterator<1, 2, 3, 4>\nfilter(n => (n < 5), from([1, 2, 3, 4, 5, 6, 7, 8]));"],"kind":"function","description":"Yield only items that pass the predicate","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L256","ignore":false},{"path":"iterable/sync/reject","sig":"(a → Boolean) → Iterable<a> → Iterator<a>","examples":["// Iterator<6, 7, 8>\nreject(n => (n < 5), from(1, 2, 3, 4, 5, 6, 7, 8));"],"kind":"function","description":"Yield only items that do not pass the predicate","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L267","ignore":false},{"path":"iterable/sync/flattenN","sig":"Number → Iterable<Iterable<a>> → Iterator<a>","examples":["// Iterator<1, 2, 3, [4]>\nflattenN(2, from([1, [2, [3, [4]]]]))"],"kind":"function","description":"Flattens n-levels of a nested iterable of iterables","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L276","ignore":false},{"path":"iterable/sync/unnest","sig":"Iterable<Iterable<a>> → Iterator<a>","examples":["// Iterator<1, 2, [3, [4]]>\nunnest(from([1, [2, [3, [4]]]]));"],"kind":"function","description":"Flattens one level of a nested iterable of iterables","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L291","ignore":false},{"path":"iterable/sync/flatten","sig":"Iterable<Iterable<a>> → Iterator<a>","examples":["// Iterator<1, 2, 3, 4>\nunnest(from([1, [2, [3, [4]]]]));"],"kind":"function","description":"Flattens a nested iterable of iterables into a single iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L300","ignore":false},{"path":"iterable/sync/unfold","sig":"(a → [a, a]) → a → Iterator<a>","examples":["// Iterator<1, 2, 4, 8>\nunfold(n => (n < 10 ? [n, n * 2] : false), 1);"],"kind":"function","description":"Unfold","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L309","ignore":false},{"path":"iterable/sync/flatIterate","sig":"(a → Iterable<a>) → a → Iterator<a>","examples":["// Iterator<0, 0, 1, 2, 2, 4, 3, 6, 4, 8, ...>\nflatIterate(function* (n) {\n  yield n;\n  yield (n * 2);\n  return n + 1;\n}, 0));"],"kind":"function","description":"Flat iterate","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L331","ignore":false},{"path":"iterable/sync/iterate","sig":"(a → a) → a → Iterator<a>","examples":["// Iterator<0, 2, 4, 6, 8, 10, ...>\niterate(n => n + 2, 0);"],"kind":"function","description":"Iterate infinitely, yielding items from seed through a predicate","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L342","ignore":false},{"path":"iterable/sync/take","sig":"Integer → Iterable<a> → Iterator<a>","examples":["// Iterator<1, 2, 3>\ntake(3, from(1, 2, 3, 4, 5));"],"kind":"function","description":"Yield only the first n items of an iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L378","ignore":false},{"path":"iterable/sync/drop","sig":"Integer → Iterable<a> → Iterator<a>","examples":["// Iterator<4, 5>\ndrop(3, from(1, 2, 3, 4, 5));"],"kind":"function","description":"Drop the first n items of an iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L390","ignore":false},{"path":"iterable/sync/tail","sig":"Iterable<a> → Iterator<a>","examples":["// Iterator<2, 3, 4, 5>\ntail(from(1, 2, 3, 4, 5));"],"kind":"function","description":"Yield all but the first item","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L399","ignore":false},{"path":"iterable/sync/repeat","sig":"a → Iterator<a>","examples":["// Iterator<'hi', 'hi', 'hi', ...>\nrepeat('hi');"],"kind":"function","description":"Infinitely yield an item (a)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L408","ignore":false},{"path":"iterable/sync/times","sig":"Integer → a → Iterator<a>","examples":["// Iterator<'hi', 'hi', 'hi', 'hi'>\ntimes(4, 'hi');"],"kind":"function","description":"Yield an item (a) n times. aka replicate","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L417","ignore":false},{"path":"iterable/sync/length","sig":"Iterable<a> → Integer","examples":["// 5\nlength(from([1, 2, 3, 4, 5]));"],"kind":"function","description":"Get length of iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L426","ignore":false},{"path":"iterable/sync/count","sig":"(a → Boolean) → Iterable<a> → Integer","examples":["// 4\ncount(n => (n > 3), from([1, 2, 3, 4, 5, 6, 7]));"],"kind":"function","description":"Return the number of items in an iterable. exhasts input","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L436","ignore":false},{"path":"iterable/sync/sumBy","sig":"(a → Number) → Iterable<a> → Number","examples":[],"kind":"function","description":"Sum by","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L442","ignore":false},{"path":"iterable/sync/minBy","sig":"(a → Number) → Iterable<a> → Number","examples":[],"kind":"function","description":"Min by","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L448","ignore":false},{"path":"iterable/sync/maxBy","sig":"(a → Number) → Iterable<a> → Number","examples":[],"kind":"function","description":"Max by","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L454","ignore":false},{"path":"iterable/sync/sum","sig":"Iterable<Number> → Number","examples":["sum(from([1, 2, 3])); // 6"],"kind":"function","description":"Sum","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L461","ignore":false},{"path":"iterable/sync/min","sig":"Iterable<Number> → Number","examples":["min(from([1, 2, 3])); // 1"],"kind":"function","description":"Min","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L468","ignore":false},{"path":"iterable/sync/max","sig":"Iterable<Number> → Number","examples":["max(from([1, 2, 3])); // 3"],"kind":"function","description":"Max","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L475","ignore":false},{"path":"iterable/sync/toArray","sig":"Iterable<a> → [a]","examples":["toArray(from([1, 2, 3])); // [1, 2, 3]"],"kind":"function","description":"Transforms an iterable to an array. exhasts input","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L482","ignore":false},{"path":"iterable/sync/nth","sig":"Integer → Iterable<a> → a|undefined\n// 'b'\nnth(1, from(['a', 'b', 'c', 'd']));","examples":[],"kind":"function","description":"Returns the element at the nth index","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L490","ignore":false},{"path":"iterable/sync/every","sig":"(a → Boolean) → Iterable<a> → Boolean","examples":["// false\nevery(n => (n < 4), from([1, 2, 3, 4]));"],"kind":"function","description":"Do all items pass their predicate?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L515","ignore":false},{"path":"iterable/sync/find","sig":"(a → Boolean) → Iterable<a> → a|undefined","examples":["const records = [{ id: 1 }, { id: 2 }, { id: 3 }];\n// { id: 2 }\nfind(record => (record.id === 2), records);"],"kind":"function","description":"Find","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L528","ignore":false},{"path":"iterable/sync/findIndex","sig":"(a → Boolean) → Iterable<a> → Integer","examples":["const records = [{ id: 1 }, { id: 2 }, { id: 3 }];\n// 1\nfind(record => (record.id === 2), records);"],"kind":"function","description":"Find index","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L541","ignore":false},{"path":"iterable/sync/exhaust","sig":"Iterable<a> → undefined","examples":["const iterator = from([1, 2, 3]);\nexhaust(iterator);\ntoArray(iterator); // []"],"kind":"function","description":"Yield all items","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L557","ignore":false},{"path":"iterable/sync/reverse","sig":"Iterable<a> → Iterator<a>","examples":["reverse(from([1, 2, 3])); // Iterator<3, 2, 1>"],"kind":"function","description":"Reverse","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L583","ignore":false},{"path":"iterable/sync/sort","sig":"((a, a) → Number) → Iterable<a> → Iterator<a>","examples":[],"kind":"function","description":"Sort","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L589","ignore":false},{"path":"iterable/sync/frame","sig":"Integer → Iterable<a> → Iterator<[a]>","examples":["// Iterator<[0, 1, 2], [1, 2, 3], [2, 3, 4], [4, 5, 6]>\nframe(3, from([0, 1, 2, 3, 4, 5, 6]));"],"kind":"function","description":"Yield a sliding \"window\" of length n. note: caches n items","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L598","ignore":false},{"path":"iterable/sync/dropLast","sig":"Number → Iterable<a> → Iterator<a>","examples":["// Iterator<1, 2, 3>\ndropLast(2, from([1, 2, 3, 4, 5]));"],"kind":"function","description":"Yield all but the last n items. note: caches n + 1 items","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L617","ignore":false},{"path":"iterable/sync/init","sig":"Iterable<a> → Iterator<a>","examples":["// Iterator<1, 2, 3, 4>\ninit(from([1, 2, 3, 4, 5]));"],"kind":"function","description":"Yield all but the last 1 item","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L632","ignore":false},{"path":"iterable/sync/tee","sig":"Integer → Iterable<a> → [Iterator<a>]","examples":["// [Iterator<1, 2, 3>, Iterator<1, 2, 3>, Iterator<1, 2, 3>]\ntee(3, from([1, 2, 3]));"],"kind":"function","description":"Copy an iterator n times (exhausts its input)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L665","ignore":false},{"path":"iterable/sync/splitEvery","sig":"Integer → Iterable<a> → Iterator<[a]>","examples":["// Iterator<[0, 1, 2], [3, 4, 5], [6, 7, 8]>\nsplitEvery(3, from([0, 1, 2, 3, 4, 5, 6, 7, 8]));"],"kind":"function","description":"Yield groups of length n","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L688","ignore":false},{"path":"iterable/sync/splitAt","sig":"Integer → Iterable<a> → [Iterator<a>, Iterator<a>]","examples":["// [Iterator<0, 1, 2, 3, 4>, Iterator<5, 6>]\nsplitAt(4, from([0, 1, 2, 3, 4, 5, 6]));"],"kind":"function","description":"Split an iterable into a pair of iterables at a particular index","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L706","ignore":false},{"path":"iterable/sync/partition","sig":"(a → Boolean) → Iterable<a> → [Iterator<a>, Iterator<a>]","examples":["// [Iterator<0, 1, 2>, Iterator<3, 4, 5, 6>]\npartition(n => n < 3, from([0, 1, 2, 3, 4, 5, 6]));"],"kind":"function","description":"Split an iterable into a pair of iterables based on the truthiness of their predicate","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L718","ignore":false},{"path":"iterable/sync/cycleN","sig":"Integer → Iterable<a> → Iterator<a>","examples":["// Iterator<1, 2, 1, 2, 1, 2>\ncycleN(3, from([1, 2]));"],"kind":"function","description":"Yield all items from an iterator, n times","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L730","ignore":false},{"path":"iterable/sync/cycle","sig":"Iterable<a> → Iterator<a>","examples":["// Iterator<1, 2, 3, 1, 2, 3, ...>\ncycle(from([1, 2, 3]));"],"kind":"function","description":"Yield iterable items cyclically, infinitely looping when exhausted","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L744","ignore":false},{"path":"iterable/sync/intersperse","sig":"a → Iterable<a> → Iterator<a>","examples":["// Iterator<'a', '-', 'b', '-', 'c'>\nintersperse('-', from('a', 'b', 'c'));"],"kind":"function","description":"Insert an item `a` between every item in the iterable","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L761","ignore":false},{"path":"iterable/sync/joinWith","sig":"String → Iterable<a> → String","examples":["// 'some-slug-parts';\njoinWith('-', from(['some', 'slug', 'parts']));"],"kind":"function","description":"Serialize iterator items to a string with an arbitrary spacer","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L774","ignore":false},{"path":"iterable/sync/join","sig":"Iterable<a> → String","examples":["// 'abcde'\njoin(from(['a', 'b', 'c', 'd', 'e']));"],"kind":"function","description":"Serialize iterator items to a string","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L786","ignore":false},{"path":"iterable/sync/isEmpty","sig":"Iterable<a> → Boolean","examples":["isEmpty(from([])); // true\nisEmpty(from([1])); // false"],"kind":"function","description":"Is an iterable empty? (done or length = 0)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L795","ignore":false},{"path":"iterable/sync/indices","sig":"Iterable<a> → Iterator<Integer>","examples":["// Iterator<0, 1, 2>\nindices(from(['a', 'b', 'c']));"],"kind":"function","description":"Get an iterator of indices (0 to length - 1)","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L820","ignore":false},{"path":"iterable/sync/padTo","sig":"Integer → a → Iterable<a> → Iterator<a>","examples":["// Iterator<'a', 'b', 'c', 'd', 'd', 'd'>\npadTo(6, 'd', from(['a', 'b', 'c']));"],"kind":"function","description":"Pad an iterable with with a finite number of items `a`","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L829","ignore":false},{"path":"iterable/sync/pad","sig":"a → Iterable<a> → Iterator<a>","examples":["// Iterator<'a', 'b', 'c', 'd', 'd', 'd', ...>\npad('d', from(['a', 'b', 'c']));"],"kind":"function","description":"Pad iterable with an infinite number of items `a`","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L842","ignore":false},{"path":"number/random","sig":"Integer → Integer → Integer","examples":["random(0, 100); // 42"],"kind":"function","description":"Get a random number between two inclusive bounds","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/number/index.js#L8","ignore":false},{"path":"object/firstPair","sig":"{ k: v } → [k, v]","examples":["firstPair({ a: 1 }); // ['a', 1]"],"kind":"function","description":"Get an object's first key: value pair","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L16","ignore":false},{"path":"object/firstKey","sig":"{ k: v } → k","examples":["firstKey({ a: 1 }); // 'a'"],"kind":"function","description":"Get an object's first key","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L23","ignore":false},{"path":"object/firstValue","sig":"{ k: v } → v","examples":["firstValue({ a: 1 }); // 1"],"kind":"function","description":"Get an object's first value","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L30","ignore":false},{"path":"object/mapPairs","sig":"([a, b] → [c, d]) → { a: b } → { c: d }","examples":["mapPairs(R.reverse, { a: 1, b: 2 }); // { 1: 'a', 2: 'b' }"],"kind":"function","description":"Map object key / value pairs","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L47","ignore":false},{"path":"object/mapKeys","sig":"(k → k) → { k: v } → { k: v }","examples":["mapKeys(R.reverse, { one: 1, two: 2 }); // { eno: 1, owt: 2 }"],"kind":"function","description":"Map object keys","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L56","ignore":false},{"path":"object/deepFreeze","sig":"{*} → {*}","examples":["deepFreeze({ a: 1 }); // { a: 1 }"],"kind":"function","description":"recursive + mutating + identity","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L71","ignore":false},{"path":"object/toHumanJSON","sig":"JSON → String","examples":["// '{\n//   \"one\": {\n//     \"two\": 2\n//   }\n// }'\ntoHumanJSON({ one: { two: 2 } });"],"kind":"function","description":"Serialize to JSON with newlines and 2-space indentation","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L110","ignore":false},{"path":"process/onSigInt","sig":null,"examples":["const offSigInt = onSigInt(_ => console.log('SIGINT'));\noffSigInt(); // unsubscribe"],"kind":"function","description":"On SIGINT","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/process/index.js#L7","ignore":false},{"path":"stream/toString","sig":"Stream → String","examples":[],"kind":"function","description":"Stream to string","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/stream/index.js#L8","ignore":false},{"path":"stream/fromString","sig":"String → Stream","examples":[],"kind":"function","description":"String to stream","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/stream/index.js#L23","ignore":false},{"path":"string/localeCompare","sig":"String → String → Number","examples":[],"kind":"function","description":"Locale compare","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/string/index.js#L20","ignore":false},{"path":"string/capitalize","sig":"String → String","examples":["capitalize('hello'); // 'Hello'"],"kind":"function","description":"Capitalize the first letter of a string","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/string/index.js#L37","ignore":false},{"path":"string/template","sig":"String → {*} → String","examples":["// 'Hello Pat!'\ntemplate('Hello ${ name }!', { name: 'Pat' });"],"kind":"function","description":"String interpolation. Reasonably similar to JavaScript template literals.","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/string/index.js#L50","ignore":false},{"path":"string/toBase64","sig":"String → String","examples":["toBase64('hello'); // 'aGVsbG8='"],"kind":"function","description":"Encode a string to base64","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/string/index.js#L67","ignore":false},{"path":"string/parseBase64","sig":"String → String","examples":["parseBase64('aGVsbG8='); // 'hello'"],"kind":"function","description":"Decode a string from base64","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/string/index.js#L74","ignore":false},{"path":"string/slugify","sig":"String → String","examples":["slugify('Hello World!'); // 'hello-world'"],"kind":"function","description":"Slugify a string","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/string/index.js#L81","ignore":false},{"path":"url/isDataUrl","sig":"a → Boolean","examples":["isDataUrl('data:,Hello%2C%20World!'); // true\nisDataUrl('https://foo.bar'); // false"],"kind":"function","description":"Is a string a data url","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/url/index.js#L13","ignore":false},{"path":"url/parseDataUrl","sig":"String → { mediatype, data, base64 }","examples":[],"kind":"function","description":"Parse Data URL","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/url/index.js#L19","ignore":false},{"path":"uuid/uuid","sig":"a → String","examples":["uuid(); // 'c4f2e775-a5f9-4796-bd31-46e544bfab06'"],"kind":"function","description":"Random UUID v4","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/uuid/index.js#L9","ignore":false},{"path":"uuid/isUuid","sig":"a → Boolean","examples":["isUuid('c4f2e775-a5f9-4796-bd31-46e544bfab06'); // true"],"kind":"function","description":"Is UUID v4?","deprecated":null,"url":"https://github.com/colbydauph/funk-lib/blob/feat-docs/src/uuid/index.js#L21","ignore":false}]}}},"pageContext":{"isCreatedByStatefulCreatePages":true}}