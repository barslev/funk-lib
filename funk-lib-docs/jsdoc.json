{
  "array/toObj": {
    "sig": "[ k: v ] → { k: v }",
    "description": "Transform an array into an object, where keys are indices, and values are elements.",
    "examples": [
      "toObj(['a', 'b', 'c']); // { 0: a, 1: b, 2: c }"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/array/index.js#L18",
    "ignore": false
  },
  "array/toObjBy": {
    "sig": "(a → b) → [a] → { b: a }",
    "description": "Given a function that generates a key, turns a list of objects into an object indexing the objects by the given key",
    "examples": [],
    "kind": "function",
    "deprecated": true,
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/array/index.js#L26",
    "ignore": true
  },
  "array/sample": {
    "sig": "[a] → a",
    "description": "Select a random array item",
    "examples": [
      "sample([0, 1, 2, 3, 4, 5]); // 2"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/array/index.js#L37",
    "ignore": false
  },
  "array/shuffle": {
    "sig": "[a] → [a]",
    "description": "Immutably randomize array element order\nFisher-Yates shuffle",
    "examples": [
      "shuffle([1, 2, 3, 4, 5]); // [4, 1, 2, 5, 3]"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/array/index.js#L47",
    "ignore": false
  },
  "async/all": {
    "sig": "[Promise<a>] → [a]",
    "description": "Resolve promises in parallel",
    "examples": [
      "// [1, 2, 3]\nawait all([\n  Promise.resolve(1),\n  2,\n  Promise.resolve(3),\n]);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L25",
    "ignore": false
  },
  "async/race": {
    "sig": "[Promise<a>] → a",
    "description": "Returns a promise that resolves or rejects as soon as one of the promises in an\niterable resolves or rejects, with the value or reason from that promise.",
    "examples": [
      "// true\nawait race([\n  delay(1).then(_ => true),\n  delay(10).then(_ => false),\n  delay(100).then(_ => throw Error('oops')),\n]);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L40",
    "ignore": false
  },
  "async/delay": {
    "sig": "Number → Promise<undefined>",
    "description": "Promise returning setTimeout",
    "examples": [
      "await delay(100); // resolved in 100ms"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L48",
    "ignore": false
  },
  "async/deferWith": {
    "sig": "[a] → (a → b) → Promise<b>",
    "description": "Defers invoking a function until the current call stack has cleared. Passes args to deferred function.",
    "examples": [
      "await deferWith([1, 2], (a, b) => a + b); // 3"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L56",
    "ignore": false
  },
  "async/defer": {
    "sig": "(a → b) → Promise<b>",
    "description": "Defers invoking a function until the current call stack has cleared",
    "examples": [
      "await defer(_ => 3); // 3"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L64",
    "ignore": false
  },
  "async/toAsync": {
    "sig": "(a → b) → (a → Promise<b>)",
    "description": "Wraps a function to always return a promise",
    "examples": [
      "const pred = n => n > 5;\nconst asyncPred = toAsync(pred);\nasyncPred(2); // Promise<false>"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L75",
    "ignore": false
  },
  "async/fromCallback": {
    "description": "Returns a promise that is resolved by an err-back function",
    "examples": [
      "await fromCallback(cb => cb(null, 123)); // 123\nawait fromCallback(cb => cb(Error('oops'))); // Error('oops')"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L83",
    "ignore": false
  },
  "async/promisify": {
    "description": "Make an errback-calling function promise-returning. Inverse of callbackify",
    "examples": [
      "const callback = (n, cb) => cb(null, n + 1);\nawait promisify(callback)(1); // 2"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L100",
    "ignore": false
  },
  "async/callbackify": {
    "description": "Make a promise-returning function errback-yielding. Inverse of promisify",
    "examples": [
      "const func = async n => n + 1;\nawait callbackify(func)(1, (err, res) => {\n  // err = null, res = 2\n});"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L113",
    "ignore": false
  },
  "async/deferred": {
    "sig": "* → Object",
    "description": "Creates an externally controlled promise",
    "examples": [
      "const { promise, resolve, reject } = deferred();\nresolve(123);\nawait promise; // 123"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L129",
    "ignore": false
  },
  "async/reduce": {
    "sig": "((a, b) → Promise<a>) → a → [b] → Promise<a>",
    "description": "Async reduce",
    "examples": [
      "// 15\nawait reduce(async (a, n) => a + n, 0, [1, 2, 3, 4, 5]);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L149",
    "ignore": false
  },
  "async/pipe": {
    "sig": "(...f) → f",
    "description": "serial + async R.pipe. works with sync or async functions",
    "examples": [
      "// 4\nawait pipe(\n  async n => n + 1,\n  async n => n * 2,\n)(1);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L165",
    "ignore": false
  },
  "async/pipeC": {
    "sig": "(...f) → f",
    "description": "Curried async pipe",
    "examples": [
      "const math = pipeC(\n  async (a, b) => a + b,\n  c => (c * 2),\n  async c => (c + 1),\n);\nawait math(2)(5) // 21;"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L181",
    "ignore": false
  },
  "async/mapLimit": {
    "sig": "Number → (a → Promise<b>) → [a] → Promise<[b]>",
    "description": "Map with variable parallelization",
    "examples": [
      "// [2, 4, 6, 8, 10]\nawait mapLimit(2, async n => (n * 2), [1, 2, 3, 4, 5]);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L191",
    "ignore": false
  },
  "async/forEachLimit": {
    "sig": "Number → (a → Promise<b>) → [a] → Promise<[a]>",
    "description": "For each with variable parallelization",
    "examples": [
      "// 1\n// 2\n// 3\nawait forEachLimit(2, async n => console.log(n), [1, 2, 3]);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L223",
    "ignore": false
  },
  "async/everyLimit": {
    "sig": "Number → (a → Promise<Boolean>) → [a] → Promise<Boolean>",
    "description": "Every with variable parallelization",
    "examples": [
      "// false\nawait everyLimit(2, async n => (n > 4), [1, 2, 3, 4, 5]);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L236",
    "ignore": false
  },
  "async/someLimit": {
    "sig": "Number → (a → Promise<Boolean>) → [a] → Promise<Boolean>",
    "description": "Some with variable parallelization",
    "examples": [
      "// true\nawait someLimit(2, async n => (n > 4), [1, 2, 3, 4, 5]);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L253",
    "ignore": false
  },
  "async/findLimit": {
    "sig": "Number → (a → Promise<Boolean>) → [a] → Promise<a>",
    "description": "Find with variable parallelization",
    "examples": [
      "const records = [{ id: 1 }, { id: 2 }, { id: 3 }];\n\n// { id: 2 }\nawait findLimit(2, async ({ id }) => (id === 2), records);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L272",
    "ignore": false
  },
  "async/flatMapLimit": {
    "sig": "Number → (a → Promise<[b]>) → [a] → Promise<[b]>",
    "description": "Flat map (aka. \"chain\") with variable parallelization",
    "examples": [
      "const array = [1, 2, 3];\n\n// [1, 2, 2, 4, 3, 6]\nawait flatMapLimit(2, async n => [n, n * 2], array);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L293",
    "ignore": false
  },
  "async/flatMapPairsLimit": {
    "sig": "",
    "description": "Flat map pairs with variable parallelization",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L301",
    "ignore": false
  },
  "async/mapPairsLimit": {
    "sig": "Number → ([a, b] → Promise<[c, d]>) → { a: b } → Promise<{ c: d }>",
    "description": "Map pairs with variable parallelization",
    "examples": [
      "// { 1: 'a', 2: 'b', 3: 'c' }\nawait mapPairsLimit(2, async pair => pair.reverse(), { a: 1, b: 2, c: 3 });"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L313",
    "ignore": false
  },
  "async/filterLimit": {
    "sig": "Number → (a → Promise<Boolean>) → [a] → Promise<[a]>",
    "description": "Filter with variable parallelization",
    "examples": [
      "const array = [1, 2, 3, 4, 5];\n\n// [1, 2]\nawait filterLimit(2, async n => (n < 3), array);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L327",
    "ignore": false
  },
  "async/allSettledLimit": {
    "sig": "Number → [Promise] → Promise<[{ status, value, reason }]>",
    "description": "All settled with variable parallelization",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L336",
    "ignore": false
  },
  "async/map": {
    "sig": "(a → Promise<b>) → [a] → Promise<[b]>",
    "description": "Parallel map",
    "examples": [
      "const array = [1, 2, 3, 4, 5];\n\n// [2, 4, 6, 8, 10]\nawait map(async n => (n * 2), array);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L355",
    "ignore": false
  },
  "async/mapSeries": {
    "sig": "(a → Promise<b>) → [a] → Promise<[b]>",
    "description": "Serial map",
    "examples": [
      "const array = [1, 2, 3, 4, 5];\n\n// [2, 4, 6, 8, 10]\nawait mapSeries(async n => (n * 2), array);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L367",
    "ignore": false
  },
  "async/flatMapPairs": {
    "description": "Parallel flat map pairs",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L373",
    "ignore": false
  },
  "async/flatMapPairsSeries": {
    "description": "Serial flat map pairs",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L379",
    "ignore": false
  },
  "async/mapPairs": {
    "sig": "([a, b] → Promise<[c, d]>) → { a: b } → Promise<{ c: d }>",
    "description": "Parallel map pairs",
    "examples": [
      "// { 1: 'a', 2: 'b', 3: 'c' }\nawait mapPairs(async pair => pair.reverse(), { a: 1, b: 2, c: 3 });"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L389",
    "ignore": false
  },
  "async/mapPairsSeries": {
    "sig": "([a, b] → Promise<[c, d]>) → { a: b } → Promise<{ c: d }>",
    "description": "Serial map pairs",
    "examples": [
      "// { 1: 'a', 2: 'b', 3: 'c' }\nawait mapPairsSeries(async pair => pair.reverse(), { a: 1, b: 2, c: 3 });"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L399",
    "ignore": false
  },
  "async/forEach": {
    "sig": "(a → Promise<b>) → [a] → Promise<[a]>",
    "description": "Parallel for each",
    "examples": [
      "// 1\n// 2\n// 3\nawait forEach(async n => console.log(n), [1, 2, 3]);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L411",
    "ignore": false
  },
  "async/forEachSeries": {
    "sig": "(a → Promise<b>) → [a] → Promise<[a]>",
    "description": "Serial for each",
    "examples": [
      "// 1\n// 2\n// 3\nawait forEachSeries(async n => console.log(n), [1, 2, 3]);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L423",
    "ignore": false
  },
  "async/every": {
    "sig": "(a → Promise<Boolean>) → [a] → Promise<Boolean>",
    "description": "Parallel every",
    "examples": [
      "// false\nawait every(async n => (n > 5), [4, 5, 6, 7]);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L433",
    "ignore": false
  },
  "async/everySeries": {
    "sig": "(a → Promise<Boolean>) → [a] → Promise<Boolean>",
    "description": "Serial every",
    "examples": [
      "// false\nawait everySeries(async n => (n > 5), [4, 5, 6, 7]);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L443",
    "ignore": false
  },
  "async/some": {
    "sig": "(a → Promise<Boolean>) → [a] → Promise<Boolean>",
    "description": "Parallel some",
    "examples": [
      "// true\nawait some(async n => (n > 5), [4, 5, 6, 7]);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L453",
    "ignore": false
  },
  "async/someSeries": {
    "sig": "(a → Promise<Boolean>) → [a] → Promise<Boolean>",
    "description": "Serial some",
    "examples": [
      "// true\nawait someSeries(async n => (n > 5), [4, 5, 6, 7]);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L463",
    "ignore": false
  },
  "async/find": {
    "sig": "(a → Promise<Boolean>) → [a] → Promise<a>",
    "description": "Parallel find",
    "examples": [
      "const records = [{ id: 1 }, { id: 2 }, { id: 3 }];\n\n// { id: 2 }\nawait find(async ({ id }) => (id === 2), records);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L475",
    "ignore": false
  },
  "async/findSeries": {
    "sig": "(a → Promise<Boolean>) → [a] → Promise<a>",
    "description": "Serial find",
    "examples": [
      "const records = [{ id: 1 }, { id: 2 }, { id: 3 }];\n\n// { id: 2 }\nawait findSeries(async ({ id }) => (id === 2), records);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L487",
    "ignore": false
  },
  "async/flatMap": {
    "sig": "(a → Promise<[b]>) → [a] → Promise<[b]>",
    "description": "Parallel flatMap (aka. \"chain\")",
    "examples": [
      "const array = [1, 2, 3];\n\n// [1, 2, 2, 4, 3, 6]\nawait flatMap(async n => [n, n * 2], array);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L499",
    "ignore": false
  },
  "async/flatMapSeries": {
    "sig": "(a → Promise<[b]>) → [a] → Promise<[b]>",
    "description": "Serial flatMap (aka. \"chain\")",
    "examples": [
      "const array = [1, 2, 3];\n\n// [1, 2, 2, 4, 3, 6]\nawait flatMapSeries(async n => [n, n * 2], array);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L511",
    "ignore": false
  },
  "async/filter": {
    "sig": "(a → Promise<Boolean>) → [a] → Promise<[a]>",
    "description": "Parallel filter",
    "examples": [
      "const array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n// [0, 1, 2, 3, 4, 5]\nawait filter(async n => (n <= 5), array);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L522",
    "ignore": false
  },
  "async/filterSeries": {
    "sig": "(a → Promise<Boolean>) → [a] → Promise<[a]>",
    "description": "Serial filter",
    "examples": [
      "const array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n// [0, 1, 2, 3, 4, 5]\nawait filterSeries(async n => (n <= 5), array);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L533",
    "ignore": false
  },
  "async/allSettled": {
    "sig": "[Promise] → Promise<[{ status, value, reason }]>",
    "description": "Parallel all settled",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L540",
    "ignore": false
  },
  "async/allSettledSeries": {
    "sig": "[Promise] → Promise<[{ status, value, reason }]>",
    "description": "Serial all settled",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L547",
    "ignore": false
  },
  "async/props": {
    "sig": "{ k: Promise<v> } → Promise<{ k: v }>",
    "description": "Parallel props",
    "examples": [
      "// { one: 1, two: 2, three: 3 }\nawait props({\n  one: Promise.resolve(1),\n  two: 2,\n  three: Promise.resolve(3),\n});"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L561",
    "ignore": false
  },
  "async/evolve": {
    "sig": "{ k: (a → Promise<b>) } → { k: a } → Promise<{ k: b }>",
    "description": "Async R.evolve",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L568",
    "ignore": false
  },
  "async/timeout": {
    "sig": "Number → Promise<a> → Promise<a>",
    "description": "Timeout a promise",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/async/index.js#L575",
    "ignore": false
  },
  "color/rgbToHsl": {
    "sig": "{ r, g, b } → { h, s, l }",
    "description": "RGB to HSL",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L14",
    "ignore": false
  },
  "color/hslToRgb": {
    "sig": "{ h, s, l } → { r, g, b }",
    "description": "HSL to RGB",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L49",
    "ignore": false
  },
  "color/hexToRgb": {
    "sig": "String → { r, g, b }",
    "description": "Hex to RGB",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L84",
    "ignore": false
  },
  "color/rgbToHex": {
    "todo:": "should this not include the hash prefix?",
    "sig": "{ r, g, b } → String",
    "description": "RGB to hex",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L105",
    "ignore": false
  },
  "color/hslToHex": {
    "sig": "{ h, s, l } → String",
    "description": "HSL to hex",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L117",
    "ignore": false
  },
  "color/hexToHsl": {
    "sig": "String → { h, s, l }",
    "description": "Hex to HSL",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L123",
    "ignore": false
  },
  "color/randomRgb": {
    "sig": "* → { r, g, b }",
    "description": "Get a random RGB value",
    "examples": [
      "randomRgb(); // { r: 35, g: 125, b: 106 }"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L130",
    "ignore": false
  },
  "color/randomHex": {
    "sig": "* → String",
    "description": "Get a random hex string",
    "examples": [
      "randomHex(); // #b3a95a"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L141",
    "ignore": false
  },
  "color/randomHsl": {
    "sig": "* → { h, s, l }",
    "description": "Get a random HSL value",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/color/index.js#L147",
    "ignore": false
  },
  "crypto/hashWith": {
    "sig": "String → String → String",
    "description": "Hash with variable algorithm",
    "examples": [
      "hashWith('md5', 'hello'); // '5d41402abc4b2a76b9719d911017c592'"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/crypto/index.js#L13",
    "ignore": false
  },
  "crypto/md5": {
    "sig": "String → String",
    "description": "md5 hash a string",
    "examples": [
      "md5('hello'); // '5d41402abc4b2a76b9719d911017c592'"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/crypto/index.js#L23",
    "ignore": false
  },
  "crypto/sha256": {
    "sig": "String → String",
    "description": "sha256 hash a string",
    "examples": [
      "sha256('hello'); // '2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824'"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/crypto/index.js#L30",
    "ignore": false
  },
  "crypto/sha512": {
    "sig": "String → String",
    "description": "sha512 hash a string",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/crypto/index.js#L36",
    "ignore": false
  },
  "datetime/now": {
    "sig": "a → Date",
    "description": "Get the current unix epoch (in ms)",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/datetime/index.js#L5",
    "ignore": false
  },
  "function/pipeC": {
    "sig": "...f → f",
    "description": "Curried pipe",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/function/index.js#L8",
    "ignore": false
  },
  "function/on": {
    "sig": "(b → b → c) → (a → b) → a → a → c",
    "description": "on",
    "examples": [
      "const records = [{ age: 9 }, { age: 1 }, { age: 3 }];\n\n// [{ age: 1 }, { age: 3 }, { age: 9 }]\nR.sort(on(R.subtract, R.prop('age'))), records);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/function/index.js#L19",
    "ignore": false
  },
  "function/once": {
    "sig": "(a → b) → (a → b)",
    "description": "Creates a function that is restricted to invoking func once.\nRepeat calls to the function return the value of the first invocation",
    "examples": [
      "const pred = n => n > 5;\nconst oncePred = once(pred);\noncePred(10); // true\noncePred(1); // true (cached. pred not called again)"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/function/index.js#L31",
    "ignore": false
  },
  "function/noop": {
    "sig": "a → undefined",
    "description": "A function that does nothing. \"no-op\"",
    "examples": [
      "noop(); // undefined"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/function/index.js#L48",
    "ignore": false
  },
  "function/throttle": {
    "sig": "Number → (a → b) → (a → b)",
    "description": "Throttle a function",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/function/index.js#L54",
    "ignore": false
  },
  "function/debounce": {
    "sig": "Number → (a → b) → (a → undefined)",
    "description": "Debounce a function",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/function/index.js#L68",
    "ignore": false
  },
  "http/parseContentType": {
    "sig": "String → { mimeType, charset, boundary }",
    "description": "Parse a content-type HTTP header into its parts",
    "examples": [],
    "kind": "constant",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/http/index.js#L12",
    "ignore": false
  },
  "array": {
    "description": "Array functions",
    "examples": [],
    "kind": "module",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L1",
    "ignore": false
  },
  "async": {
    "description": "Async functions",
    "examples": [],
    "kind": "module",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L6",
    "ignore": false
  },
  "color": {
    "description": "Color functions",
    "examples": [],
    "kind": "module",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L11",
    "ignore": false
  },
  "crypto": {
    "description": "Crypto functions",
    "examples": [],
    "kind": "module",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L16",
    "ignore": false
  },
  "datetime": {
    "description": "Datetime functions",
    "examples": [],
    "kind": "module",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L21",
    "ignore": false
  },
  "function": {
    "description": "Function functions",
    "examples": [],
    "kind": "module",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L26",
    "ignore": false
  },
  "http": {
    "description": "HTTP functions",
    "examples": [],
    "kind": "module",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L31",
    "ignore": false
  },
  "is": {
    "description": "Is functions",
    "examples": [],
    "kind": "module",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L36",
    "ignore": false
  },
  "iterable": {
    "description": "Iterable functions",
    "examples": [],
    "kind": "module",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L41",
    "ignore": false
  },
  "number": {
    "description": "Number functions",
    "examples": [],
    "kind": "module",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L46",
    "ignore": false
  },
  "object": {
    "description": "Object functions",
    "examples": [],
    "kind": "module",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L51",
    "ignore": false
  },
  "process": {
    "description": "Process functions",
    "examples": [],
    "kind": "module",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L56",
    "ignore": false
  },
  "stream": {
    "description": "Stream functions",
    "examples": [],
    "kind": "module",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L61",
    "ignore": false
  },
  "string": {
    "description": "String functions",
    "examples": [],
    "kind": "module",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L66",
    "ignore": false
  },
  "url": {
    "description": "Url functions",
    "examples": [],
    "kind": "module",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L71",
    "ignore": false
  },
  "uuid": {
    "description": "UUID functions",
    "examples": [],
    "kind": "module",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/index.js#L76",
    "ignore": false
  },
  "is/isFinite": {
    "sig": "a → Boolean",
    "description": "Is finite?",
    "examples": [
      "isFinite(10); // true\nisFinite(Infinity); // false"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L18",
    "ignore": false
  },
  "is/isInteger": {
    "sig": "a → Boolean",
    "description": "Is integer?",
    "examples": [
      "isInteger(1); // true\nisInteger(1.23); // false"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L27",
    "ignore": false
  },
  "is/isNaN": {
    "sig": "a → Boolean",
    "description": "Is NaN?",
    "examples": [
      "isNaN(NaN); // true"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L34",
    "ignore": false
  },
  "is/isArray": {
    "sig": "a → Boolean",
    "description": "Is Array?",
    "examples": [
      "isArray([]); // true"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L43",
    "ignore": false
  },
  "is/isBuffer": {
    "sig": "a → Boolean",
    "description": "Is Buffer?",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L51",
    "ignore": false
  },
  "is/is": {
    "sig": "a → b → Boolean",
    "description": "Is equal (strict reference equality)",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L58",
    "ignore": false
  },
  "is/isNot": {
    "sig": "a → b → Boolean",
    "description": "Is not equal (strict reference equality)",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L64",
    "ignore": false
  },
  "is/isInstanceOf": {
    "sig": "String → a → Boolean",
    "description": "Is instance of class?",
    "examples": [
      "isInstanceOf(Array, []); // true"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L71",
    "ignore": false
  },
  "is/isTypeOf": {
    "sig": "String → a → Boolean",
    "description": "Is type of?",
    "examples": [
      "isTypeOf('boolean', true); // true"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L78",
    "ignore": false
  },
  "is/isBoolean": {
    "sig": "a → Boolean",
    "description": "Is Boolean?",
    "examples": [
      "isBoolean(false); // true"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L85",
    "ignore": false
  },
  "is/isDate": {
    "sig": "a → Boolean",
    "description": "Is Date?",
    "examples": [
      "isDate(new Date()); // true"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L92",
    "ignore": false
  },
  "is/isRegExp": {
    "sig": "a → Boolean",
    "description": "Is regular expression?",
    "examples": [
      "isRegExp(/[a-z]/); // true"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L99",
    "ignore": false
  },
  "is/isFunction": {
    "sig": "a → Boolean",
    "description": "Is function?",
    "examples": [
      "isFunction(() => {}); // true"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L106",
    "ignore": false
  },
  "is/isNull": {
    "sig": "a → Boolean",
    "description": "Is null?",
    "examples": [
      "isNull(null); // true"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L113",
    "ignore": false
  },
  "is/isString": {
    "sig": "a → Boolean",
    "description": "Is string?",
    "examples": [
      "isString('hello'); // true"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L120",
    "ignore": false
  },
  "is/isSymbol": {
    "sig": "a → Boolean",
    "description": "Is symbol?",
    "examples": [
      "isSymbol('foo'); // true"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L127",
    "ignore": false
  },
  "is/isUndefined": {
    "sig": "a → Boolean",
    "description": "Is undefined?",
    "examples": [
      "isUndefined(undefined); // true"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L134",
    "ignore": false
  },
  "is/isNumber": {
    "sig": "a → Boolean",
    "description": "Is number?",
    "examples": [
      "isNumber(10); // true\nisNumber(NaN); // false"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L143",
    "ignore": false
  },
  "is/isNegative": {
    "sig": "a → Boolean",
    "description": "Is negative?",
    "examples": [
      "isNumber(-10); // true\nisNumber(10); // false"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L152",
    "ignore": false
  },
  "is/isPositive": {
    "sig": "a → Boolean",
    "description": "Is positive?",
    "examples": [
      "isNumber(10); // true\nisNumber(-10); // false"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L161",
    "ignore": false
  },
  "is/isFloat": {
    "sig": "a → Boolean",
    "description": "Is float?",
    "examples": [
      "isFloat(1.23); // true\nisFloat(1); // false"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L170",
    "ignore": false
  },
  "is/isTruthy": {
    "sig": "a → Boolean",
    "description": "Is truthy?",
    "examples": [
      "isTruthy(1); // true"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L177",
    "ignore": false
  },
  "is/isFalsey": {
    "sig": "a → Boolean",
    "description": "Is false?",
    "examples": [
      "isFalsey(0); // true"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L184",
    "ignore": false
  },
  "is/isObject": {
    "sig": "a → Boolean",
    "description": "Is object?",
    "examples": [
      "isObject({}); // true\nisObject([]]); // false\nisObject(null); // false"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L194",
    "ignore": false
  },
  "is/isPromise": {
    "sig": "a → Boolean",
    "description": "Is promise?",
    "examples": [
      "isPromise(Promise.resolve(1)); // true"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L205",
    "ignore": false
  },
  "is/isStream": {
    "sig": "a → Boolean",
    "description": "Is stream?",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L215",
    "ignore": false
  },
  "is/isPojo": {
    "sig": "a → Boolean",
    "description": "Is \"plain old javascript object\"?",
    "examples": [
      "isPojo({}); // true"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L225",
    "ignore": false
  },
  "is/isIterator": {
    "sig": "a → Boolean",
    "description": "Is iterator?",
    "examples": [
      "const iterator = [][Symbol.iterator]();\nisIterator(iterator); // true"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L237",
    "ignore": false
  },
  "is/isIterable": {
    "sig": "a → Boolean",
    "description": "Is iterable?",
    "examples": [
      "isIterable([]); // true"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L248",
    "ignore": false
  },
  "is/isAsyncIterable": {
    "sig": "a → Boolean",
    "description": "Is async iterable?",
    "examples": [
      "const iterator = (async function* () {})();\nisAsyncIterable(iterator); // true"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/is/index.js#L260",
    "ignore": false
  },
  "iterable/async/map": {
    "sig": "(a → Promise<b>) → Iterable<a> → AsyncIterator<b>",
    "description": "Applies a function to each of an async iterable's yielded items. Works on all iterables",
    "examples": [
      "const iterator = from([1, 2, 3]);\nmap(async n => n * 2, iterator); // AsyncIterator<2, 4, 6>"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L32",
    "ignore": false
  },
  "iterable/async/from": {
    "sig": "Iterable<a> → AsyncIterator<a>",
    "description": "Returns an async iterator from an iterable",
    "examples": [
      "from([1, 2, 3]) // AsyncIterator<1, 2, 3>"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L42",
    "ignore": false
  },
  "iterable/async/last": {
    "sig": "Iterable<a> → Promise<a>",
    "description": "Returns the last item",
    "examples": [
      "await last(from(1, 2, 3)); // 3"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L67",
    "ignore": false
  },
  "iterable/async/flatMap": {
    "sig": "(a → Iterable<b>) → Iterable<a> → AsyncIterator<b>",
    "description": "Maps a function over an iterable and concatenates the results. a.k.a. \"chain\"",
    "examples": [
      "const iterator = from([1, 2, 3])\n\n// AsyncIterator<1, 2, 2, 4, 3, 6>\nflatMap(async function* (n) {\n  yield await n;\n  yield await n * 2;\n}, iterator);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L86",
    "ignore": false
  },
  "iterable/async/of": {
    "sig": "...a → AsyncIterator<a>",
    "description": "Create an iterator of one or more (variadic) arguments",
    "examples": [
      "of(1, 2, 3); // AsyncIterator<1, 2, 3>"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L96",
    "ignore": false
  },
  "iterable/async/scan": {
    "sig": "((a, b) → Promise<a>) → a → Iterable<b> → AsyncIterator<a>",
    "description": "Scan",
    "examples": [
      "// AsyncIterator<1, 1, 2, 6, 24>\nscan(R.multiply, 1, from([1, 2, 3, 4]));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L105",
    "ignore": false
  },
  "iterable/async/reduce": {
    "sig": "((a, b) → Promise<a>) → a → Iterable<b> → Promise<a>",
    "description": "Reduce",
    "examples": [
      "// 6\nawait reduce((a, b) => a + b, 0, from([1, 2, 3]));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L118",
    "ignore": false
  },
  "iterable/async/zipAll": {
    "sig": "[Iterable<a>, Iterable<b>, Iterable<c>] → AsyncIterator<[a, b, c]>",
    "description": "Zip an array of iterables into an iterables of arrays of items from corresponding indices\nof the input iterables",
    "examples": [
      "// AsyncIterator<[1, 4, 7], [2, 5, 8], [3, 6, 9]>\nzipAll([\n  from([1, 2, 3]),\n  from([4, 5, 6]),\n  from([7, 8, 9]),\n]);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L150",
    "ignore": false
  },
  "iterable/async/zipWith": {
    "sig": "((a, b) → Promise<c>) → Iterable<a> → Iterable<b> → AsyncIterator<c>",
    "description": "Zip two iterables with a custom zipping function",
    "examples": [
      "// AsyncIterator<[4, 1], [5, 2], [6, 3]>\nzipWith((a, b) => [b, a])(from([1, 2, 3]), from([4, 5, 6]));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L161",
    "ignore": false
  },
  "iterable/async/zip": {
    "sig": "Iterable<a> → Iterable<b> → AsyncIterator<[a, b]>",
    "description": "Zips two iterables into pairs of items from corresponding indices\nof the input iterables. truncated to shorter of two iterables",
    "examples": [
      "// AsyncIterator<[1, 4], [2, 5], [3, 6]>\nzip(from([1, 2, 3]), from([4, 5, 6]));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L172",
    "ignore": false
  },
  "iterable/async/rangeStep": {
    "sig": "Number → Number → Number → AsyncIterator<Number>",
    "description": "Iterates from 0 to n by with a step (exclusive)",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L179",
    "ignore": false
  },
  "iterable/async/range": {
    "sig": "Number → Number → AsyncIterator<Number>",
    "description": "Iterates from 0 to n - 1 (exclusive)",
    "examples": [
      "range(0, 5); // AsyncIterator<0, 1, 2, 3, 4>"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L191",
    "ignore": false
  },
  "iterable/async/enumerate": {
    "sig": "Iterable<a> → AsyncIterator<[Integer, a]>",
    "description": "transform an iterable to an iterable of pairs of indices and their items",
    "examples": [
      "// AsyncIterator<[0, 'zero'], [1, 'one'], [2, 'two']>\nenumerate(from(['zero', 'one', 'two']));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L200",
    "ignore": false
  },
  "iterable/async/slice": {
    "sig": "Integer → Integer → Iterable<a> → AsyncIterator<a>",
    "description": "Slice an async iterator between two indices",
    "examples": [
      "// AsyncIterator<3, 4, 5>\nslice(2, 5, from(1, 2, 3, 4, 5, 6, 7, 8));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L219",
    "ignore": false
  },
  "iterable/async/concat": {
    "sig": "Iterable<a> → Iterable<a> → AsyncIterator<a>",
    "description": "Yield all items from one iterator, then the other",
    "examples": [
      "// AsyncIterator<1, 2, 3, 4, 5, 6>\nconcat(from([1, 2, 3]), from([4, 5, 6]));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L233",
    "ignore": false
  },
  "iterable/async/prepend": {
    "sig": "a → Iterable<a> → AsyncIterator<a>",
    "description": "Prepend an item `a` to the end of an iterable",
    "examples": [
      "// AsyncIterator<0, 1, 2, 3>\nprepend(0, from([1, 2, 3]));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L245",
    "ignore": false
  },
  "iterable/async/append": {
    "sig": "a → Iterable<a> → AsyncIterator<a>",
    "description": "Append an item `a` to the start of an iterable",
    "examples": [
      "append(4, from([1, 2, 3])); // AsyncIterator<1, 2, 3, 4>"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L252",
    "ignore": false
  },
  "iterable/async/forEach": {
    "sig": "(a → Promise<b>) → Iterable<a> → AsyncIterator<a>",
    "description": "run a function (side-effect) once for each item",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L258",
    "ignore": false
  },
  "iterable/async/filter": {
    "sig": "(a → Promise<Boolean>) → Iterable<a> → AsyncIterator<a>",
    "description": "yield only items that pass the predicate",
    "examples": [
      "// AsyncIterator<1, 2, 3, 4>\nfilter(async n => (n < 5), from(1, 2, 3, 4, 5, 6, 7, 8));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L270",
    "ignore": false
  },
  "iterable/async/reject": {
    "sig": "(a → Promise<Boolean>) → Iterable<a> → AsyncIterator<a>",
    "description": "Yield only items that do not pass the predicate",
    "examples": [
      "// AsyncIterator<6, 7, 8>\nreject(async n => (n < 5), from(1, 2, 3, 4, 5, 6, 7, 8));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L281",
    "ignore": false
  },
  "iterable/async/unnest": {
    "sig": "Iterable<Iterable<a>> → AsyncIterator<a>",
    "description": "Flattens one level of a nested iterable of iterables",
    "examples": [
      "// AsyncIterator<1, 2, [3, [4]]>\nunnest(from([1, [2, [3, [4]]]]));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L300",
    "ignore": false
  },
  "iterable/async/flatten": {
    "sig": "Iterable<Iterable<a>> → AsyncIterator<a>",
    "description": "Flattens a nested iterable of iterables into a single iterable",
    "examples": [
      "// AsyncIterator<1, 2, 3, 4>\nunnest(from([1, [2, [3, [4]]]]));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L309",
    "ignore": false
  },
  "iterable/async/flatIterate": {
    "sig": "(a → Iterable<a>) → a → AsyncIterator<a>",
    "description": "Flat iterate",
    "examples": [
      "// AsyncIterator<0, 0, 1, 2, 2, 4, 3, 6, 4, 8, ...>\nflatIterate(async function* (n) {\n  yield await n;\n  yield await (n * 2);\n  return n + 1;\n}, 0));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L336",
    "ignore": false
  },
  "iterable/async/iterate": {
    "sig": "(a → Promise<a>) → a → AsyncIterator<a>",
    "description": "Iterate infinitely, yielding items from seed through a predicate",
    "examples": [
      "// AsyncIterator<0, 2, 4, 6, 8, 10, ...>\niterate(async n => n + 2, 0);"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L348",
    "ignore": false
  },
  "iterable/async/some": {
    "sig": "(a → Promise<Boolean>) → Iterable<a> → Promise<Boolean>",
    "description": "Does any item pass the predicate?",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L357",
    "ignore": false
  },
  "iterable/async/none": {
    "sig": "(a → Promise<Boolean>) → Iterable<a> → Promise<Boolean>",
    "description": "Do all items fail the predicate?",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L366",
    "ignore": false
  },
  "iterable/async/unique": {
    "sig": "Iterable<a> → AsyncIterator<a>",
    "description": "Yield only the unique items in an iterable (by strict equality)",
    "examples": [
      "unique(from([1, 1, 2, 3, 4, 4, 4])) // AsyncIterator<1, 2, 3, 4>"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L387",
    "ignore": false
  },
  "iterable/async/take": {
    "sig": "Integer → Iterable<a> → AsyncIterator<a>",
    "description": "Yield only the first n items of an iterable",
    "examples": [
      "// AsyncIterator<1, 2, 3>\ntake(3, from(1, 2, 3, 4, 5));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L403",
    "ignore": false
  },
  "iterable/async/drop": {
    "sig": "Integer → Iterable<a> → AsyncIterator<a>",
    "description": "Drop the first n items of an iterable",
    "examples": [
      "// AsyncIterator<4, 5>\ndrop(3, from(1, 2, 3, 4, 5));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L415",
    "ignore": false
  },
  "iterable/async/tail": {
    "sig": "Iterable<a> → AsyncIterator<a>",
    "description": "Yield all but the first item",
    "examples": [
      "// AsyncIterator<2, 3, 4, 5>\ntail(from(1, 2, 3, 4, 5));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L424",
    "ignore": false
  },
  "iterable/async/repeat": {
    "sig": "a → Iterator<a>",
    "description": "Infinitely yield an item (a)",
    "examples": [
      "// AsyncIterator<'hi', 'hi', 'hi', ...>\nrepeat('hi');"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L433",
    "ignore": false
  },
  "iterable/async/times": {
    "sig": "Integer → a → AsyncIterator<a>",
    "description": "Yield an item (a) n times. aka replicate",
    "examples": [
      "// AsyncIterator<'hi', 'hi', 'hi', 'hi'>\ntime(4, 'hi');"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L442",
    "ignore": false
  },
  "iterable/async/length": {
    "sig": "Iterable<a> → Promise<Integer>",
    "description": "Get length of iterable",
    "examples": [
      "// 5\nawait length(from([1, 2, 3, 4, 5]));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L452",
    "ignore": false
  },
  "iterable/async/sumBy": {
    "sig": "(a → Promise<Number>) → Iterable<a> → Promise<Number>",
    "description": "Sum by",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L462",
    "ignore": false
  },
  "iterable/async/sum": {
    "sig": "Iterable<Number> → Promise<Number>",
    "description": "Sum",
    "examples": [
      "await sum(from([1, 2, 3])); // 6"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L475",
    "ignore": false
  },
  "iterable/async/min": {
    "sig": "Iterable<Number> → Promise<Number>",
    "description": "Min",
    "examples": [
      "await min(from([1, 2, 3])); // 1"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L482",
    "ignore": false
  },
  "iterable/async/max": {
    "sig": "Iterable<Number> → Promise<Number>",
    "description": "Max",
    "examples": [
      "await max(from([1, 2, 3])); // 3"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L489",
    "ignore": false
  },
  "iterable/async/toArray": {
    "sig": "Iterable<a> → Promise<[a]>",
    "description": "Transforms an iterable to an array. exhasts input",
    "examples": [
      "await toArray(from([1, 2, 3])); // [1, 2, 3]"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L496",
    "ignore": false
  },
  "iterable/async/every": {
    "sig": "(a → Promise<Boolean>) → Iterable<a> → Promise<Boolean>",
    "description": "Do all items pass their predicate?",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L511",
    "ignore": false
  },
  "iterable/async/find": {
    "sig": "(a → Promise<Boolean>) → Iterable<a> → Promise<a|undefined>",
    "description": "Find",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L521",
    "ignore": false
  },
  "iterable/async/findIndex": {
    "sig": "(a → Promise<Boolean>) → Iterable<a> → Promise<Integer>",
    "description": "Find index",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L530",
    "ignore": false
  },
  "iterable/async/exhaust": {
    "sig": "Iterable<a> → Promise<undefined>",
    "description": "Yield all items",
    "examples": [
      "const iterator = from([1, 2, 3]);\nawait exhaust(iterator);\nawait toArray(iterator); // []"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L546",
    "ignore": false
  },
  "iterable/async/takeWhile": {
    "sig": "(a → Promise<Boolean>) → Iterable<a> → AsyncIterator<a>",
    "description": "Take while",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L554",
    "ignore": false
  },
  "iterable/async/dropWhile": {
    "sig": "(a → Promise<Boolean>) → Iterable<a> → AsyncIterator<a>",
    "description": "Drop while",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L565",
    "ignore": false
  },
  "iterable/async/reverse": {
    "todo:": "there might be a more efficient strategy for arrays. generators are not iterable in reverse",
    "sig": "Iterable<a> → AsyncIterator<a>",
    "description": "Reverse",
    "examples": [
      "reverse(from([1, 2, 3])); // AsyncIterator<3, 2, 1>"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L578",
    "ignore": false
  },
  "iterable/async/frame": {
    "sig": "Integer → Iterable<a> → AsyncIterator<[a]>",
    "description": "Yield a sliding \"window\" of length n\nnote: caches of n items",
    "examples": [
      "// AsyncIterator<[0, 1, 2], [1, 2, 3], [2, 3, 4], [4, 5, 6]>\nframe(3, from([0, 1, 2, 3, 4, 5, 6]));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L594",
    "ignore": false
  },
  "iterable/async/group": {
    "sig": "Iterable<a> → AsyncIterator<[a]>",
    "description": "Group",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L646",
    "ignore": false
  },
  "iterable/async/tee": {
    "sig": "Integer → Iterable<a> → [AsyncIterator<a>]",
    "description": "Copy an iterator n times (exhausts its input)",
    "examples": [
      "// [AsyncIterator<1, 2, 3>, AsyncIterator<1, 2, 3>, AsyncIterator<1, 2, 3>]\ntee(3, from([1, 2, 3]));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L656",
    "ignore": false
  },
  "iterable/async/splitEvery": {
    "sig": "Integer → Iterable<a> → AsyncIterator<[a]>",
    "description": "Yield groups of length n",
    "examples": [
      "// AsyncIterator<[0, 1, 2], [3, 4, 5], [6, 7, 8]>\nsplitEvery(3, from([0, 1, 2, 3, 4, 5, 6, 7, 8]));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L682",
    "ignore": false
  },
  "iterable/async/splitAt": {
    "sig": "Integer → Iterable<a> → [AsyncIterator<a>, AsyncIterator<a>]",
    "description": "Split an iterable into a pair of iterables at a particular index",
    "examples": [
      "// [AsyncIterator<0, 1, 2, 3, 4>, AsyncIterator<5, 6>]\nsplitAt(4, from([0, 1, 2, 3, 4, 5, 6]));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L700",
    "ignore": false
  },
  "iterable/async/partition": {
    "sig": "(a → Promise<Boolean>) → Iterable<a> → [AsyncIterator<a>, AsyncIterator<a>]",
    "description": "Split an iterable into a pair of iterables based on the truthiness of their predicate",
    "examples": [
      "// [AsyncIterator<0, 1, 2>, AsyncIterator<3, 4, 5, 6>]\npartition(n => n < 3, from([0, 1, 2, 3, 4, 5, 6]));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L712",
    "ignore": false
  },
  "iterable/async/cycleN": {
    "sig": "Integer → Iterable<a> → AsyncIterator<a>",
    "description": "Yield all items from an iterator, n times",
    "examples": [
      "// AsyncIterator<1, 2, 1, 2, 1, 2>\ncycleN(3, from([1, 2]));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L724",
    "ignore": false
  },
  "iterable/async/cycle": {
    "sig": "Iterable<a> → AsyncIterator<a>",
    "description": "Yield iterable items cyclically, infinitely looping when exhausted",
    "examples": [
      "// AsyncIterator<1, 2, 3, 1, 2, 3, ...>\ncycle(from([1, 2, 3]));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L738",
    "ignore": false
  },
  "iterable/async/intersperse": {
    "sig": "a → Iterable<a> → AsyncIterator<a>",
    "description": "Insert an item `a` between every item in the iterable",
    "examples": [
      "// AsyncIterator<'a', '-', 'b', '-', 'c'>\nintersperse('-', from('a', 'b', 'c'));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L755",
    "ignore": false
  },
  "iterable/async/joinWith": {
    "sig": "String → Iterable<a> → Promise<String>",
    "description": "Serialize iterator items to a string with an arbitrary spacer",
    "examples": [
      "// 'some-slug-parts';\nawait joinWith('-', from(['some', 'slug', 'parts']));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L769",
    "ignore": false
  },
  "iterable/async/join": {
    "sig": "Iterable<a> → Promise<String>",
    "description": "Serialize iterator items to a string",
    "examples": [
      "// 'abcde'\nawait join(from(['a', 'b', 'c', 'd', 'e']));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L781",
    "ignore": false
  },
  "iterable/async/isEmpty": {
    "sig": "Iterable<a> → Promise<Boolean>",
    "description": "Is an iterable empty? (done or length = 0)",
    "examples": [
      "await isEmpty(from([])); // true\nawait isEmpty(from([1])); // false"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L790",
    "ignore": false
  },
  "iterable/async/indices": {
    "sig": "Iterable<a> → AsyncIterator<Integer>",
    "description": "Get an iterator of indices (0 to length - 1)",
    "examples": [
      "// AsyncIterator<0, 1, 2>\nindices(from(['a', 'b', 'c']));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L815",
    "ignore": false
  },
  "iterable/async/padTo": {
    "sig": "Integer → a → Iterable<a> → AsyncIterator<a>",
    "description": "Pad an iterable with with a finite number of items `a`",
    "examples": [
      "// AsyncIterator<'a', 'b', 'c', 'd', 'd', 'd'>\npadTo(6, 'd', from(['a', 'b', 'c']));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L824",
    "ignore": false
  },
  "iterable/async/pad": {
    "sig": "a → Iterable<a> → AsyncIterator<a>",
    "description": "Pad iterable with an infinite number of items `a`",
    "examples": [
      "// AsyncIterator<'a', 'b', 'c', 'd', 'd', 'd', ...>\npad('d', from(['a', 'b', 'c']));"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/async.js#L837",
    "ignore": false
  },
  "iterable/async": {
    "description": "Async iterable functions",
    "examples": [],
    "kind": "module",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/index.js#L1",
    "ignore": false
  },
  "iterable/sync": {
    "description": "Sync iterable functions",
    "examples": [],
    "kind": "module",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/index.js#L6",
    "ignore": false
  },
  "iterable/sync/from": {
    "sig": "Iterable<a> → Iterator<a>",
    "description": "Returns an iterator from an iterable",
    "examples": [
      "from([1, 2, 3]) // Iterator<1, 2, 3>"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/iterable/sync.js#L28",
    "ignore": false
  },
  "number/random": {
    "sig": "Integer → Integer → Integer",
    "description": "Get a random number between two inclusive bounds",
    "examples": [
      "random(0, 100); // 42"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/number/index.js#L8",
    "ignore": false
  },
  "object/firstPair": {
    "sig": "{ k: v } → [k, v]",
    "description": "Get an object's first key: value pair",
    "examples": [
      "firstPair({ a: 1 }); // ['a', 1]"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L16",
    "ignore": false
  },
  "object/firstKey": {
    "sig": "{ k: v } → k",
    "description": "Get an object's first key",
    "examples": [
      "firstKey({ a: 1 }); // 'a'"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L23",
    "ignore": false
  },
  "object/firstValue": {
    "sig": "{ k: v } → v",
    "description": "Get an object's first value",
    "examples": [
      "firstValue({ a: 1 }); // 1"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L30",
    "ignore": false
  },
  "object/mapPairs": {
    "sig": "([a, b] → [c, d]) → { a: b } → { c: d }",
    "description": "Map object key / value pairs",
    "examples": [
      "mapPairs(R.reverse, { a: 1, b: 2 }); // { 1: 'a', 2: 'b' }"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L47",
    "ignore": false
  },
  "object/mapKeys": {
    "sig": "(k → k) → { k: v } → { k: v }",
    "description": "Map object keys",
    "examples": [
      "mapKeys(R.reverse, { one: 1, two: 2 }); // { eno: 1, owt: 2 }"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L56",
    "ignore": false
  },
  "object/deepFreeze": {
    "sig": "{*} → {*}",
    "description": "recursive + mutating + identity",
    "examples": [
      "deepFreeze({ a: 1 }); // { a: 1 }"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L71",
    "ignore": false
  },
  "object/toHumanJSON": {
    "sig": "JSON → String",
    "description": "Serialize to JSON with newlines and 2-space indentation",
    "examples": [
      "// '{\n//   \"one\": {\n//     \"two\": 2\n//   }\n// }'\ntoHumanJSON({ one: { two: 2 } });"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/object/index.js#L110",
    "ignore": false
  },
  "process/onSigInt": {
    "description": "On SIGINT",
    "examples": [
      "const offSigInt = onSigInt(_ => console.log('SIGINT'));\noffSigInt(); // unsubscribe"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/process/index.js#L7",
    "ignore": false
  },
  "stream/toString": {
    "sig": "Stream → String",
    "description": "Stream to string",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/stream/index.js#L8",
    "ignore": false
  },
  "stream/fromString": {
    "sig": "String → Stream",
    "description": "String to stream",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/stream/index.js#L23",
    "ignore": false
  },
  "string/localeCompare": {
    "sig": "String → String → Number",
    "description": "Locale compare",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/string/index.js#L20",
    "ignore": false
  },
  "string/capitalize": {
    "sig": "String → String",
    "description": "Capitalize the first letter of a string",
    "examples": [
      "capitalize('hello'); // 'Hello'"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/string/index.js#L37",
    "ignore": false
  },
  "string/template": {
    "sig": "String → {*} → String",
    "description": "String interpolation. Reasonably similar to JavaScript template literals.",
    "examples": [
      "// 'Hello Pat!'\ntemplate('Hello ${ name }!', { name: 'Pat' });"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/string/index.js#L50",
    "ignore": false
  },
  "string/toBase64": {
    "sig": "String → String",
    "description": "Encode a string to base64",
    "examples": [
      "toBase64('hello'); // 'aGVsbG8='"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/string/index.js#L67",
    "ignore": false
  },
  "string/parseBase64": {
    "sig": "String → String",
    "description": "Decode a string from base64",
    "examples": [
      "parseBase64('aGVsbG8='); // 'hello'"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/string/index.js#L74",
    "ignore": false
  },
  "string/slugify": {
    "sig": "String → String",
    "description": "Slugify a string",
    "examples": [
      "slugify('Hello World!'); // 'hello-world'"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/string/index.js#L81",
    "ignore": false
  },
  "url/isDataUrl": {
    "sig": "a → Boolean",
    "description": "Is a string a data url",
    "examples": [
      "isDataUrl('data:,Hello%2C%20World!'); // true\nisDataUrl('https://foo.bar'); // false"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/url/index.js#L13",
    "ignore": false
  },
  "url/parseDataUrl": {
    "sig": "String → { mediatype, data, base64 }",
    "description": "Parse Data URL",
    "examples": [],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/url/index.js#L19",
    "ignore": false
  },
  "uuid/uuid": {
    "sig": "a → String",
    "description": "Random UUID v4",
    "examples": [
      "uuid(); // 'c4f2e775-a5f9-4796-bd31-46e544bfab06'"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/uuid/index.js#L9",
    "ignore": false
  },
  "uuid/isUuid": {
    "sig": "a → Boolean",
    "description": "Is UUID v4?",
    "examples": [
      "isUuid('c4f2e775-a5f9-4796-bd31-46e544bfab06'); // true"
    ],
    "kind": "function",
    "url": "https://github.com/colbydauph/funk-lib/blob/feat-docs/src/uuid/index.js#L21",
    "ignore": false
  }
}
